type Factory @entity {
  # factory address
  id: ID!
  # amount of markets created
  marketCount: BigInt!
  # amount of transactions all time
  txCount: BigInt!
  # total volumne all time in OVL
  totalVolumeOVL: BigDecimal!
  # total fees generated in OVL
  totalFeesOVL: BigDecimal!
  # total value locked in OVL
  totalValueLockedOVL: BigDecimal!
  # fee receipient address
  feeRecipient: ID!
  # owner of factory
  owner: ID!
  # markets held in factory contract
  markets: [Market!]! @derivedFrom(field: "factory")
}

type Market @entity {
  # market contract address
  id: ID!
  # feed contract address
  feedAddress: String!
  # factory contract address
  factory: Factory!
  # creation timestamp
  createdAtTimestamp: BigInt!
  # creation block number
  createdAtBlockNumber: BigInt!
  # funding constant
  k: BigInt!
  # market impact constant
  lmbda: BigInt!
  # bid-ask static spread constant
  delta: BigInt!
  # cap pay-off
  capPayoff: BigInt!
  # notional cap
  capNotional: BigInt!
  # leverage cap
  capLeverage: BigInt!
  # trailing window for circuit breaker
  circuitBreakerWindow: BigInt!
  # target worst case inflation rate over trailing window
  circuitBreakerMintTarget: BigInt!
  # maintenance margin constant
  maintenanceMarginFraction: BigInt!
  # burn rate for maintenance margin constant
  maintenanceMarginBurnRate: BigInt!
  # liquidation fees
  liquidationFeeRate: BigInt!
  # trading fees on build/unwind
  tradingFeeRate: BigInt!
  # minimum collateral to open a position in OVL
  minCollateral: BigInt!
  # upper limit for price feed changes since last update
  priceDriftUpperLimit: BigInt!
  # average block time of the respective chain
  averageBlockTime: BigInt!
  # total current oi long
  oiLong: BigInt!
  # total current oi short
  oiShort: BigInt!
  # positions held in market
  positions: [Position!]! @derivedFrom(field: "market")
  # if market is shut down
  isShutdown: Boolean!
  # fees and tx count:
  # number of builds/positions
  numberOfBuilds: BigInt!
  # sum of all build fees
  totalBuildFees: BigInt!
  # number of unwinds
  numberOfUnwinds: BigInt!
  # sum of all build fees
  totalUnwindFees: BigInt!
  # number of liquidates
  numberOfLiquidates: BigInt!
  # sum of all build fees
  totalLiquidateFees: BigInt!
  # sum of all fees
  totalFees: BigInt!
}

type Position @entity {
  # market contract concat'd with position id
  id: ID!
  # position id
  positionId: String!
  # owner of position
  owner: Account!
  # market contract address related to position
  market: Market!
  # initial oi when building position
  initialOi: BigInt!
  # initial debt when building position
  initialDebt: BigInt!
  # initial collateral at time of building position
  initialCollateral: BigInt!
  # initial notional at time of building position
  initialNotional: BigInt!
  # leverage taken on position
  leverage: BigDecimal!
  # total fraction unwound from inception
  fractionUnwound: BigInt!
  # long/short
  isLong: Boolean!
  # entry price when building position
  entryPrice: BigInt!
  # is position liquidated
  isLiquidated: Boolean!
  # current oi
  currentOi: BigInt!
  # current debt
  currentDebt: BigInt!
  # total ovl minted/burned from transactions
  mint: BigInt!
  # time stamp of position creation
  createdAtTimestamp: BigInt!
  # block number of position creation
  createdAtBlockNumber: BigInt!
  # number of unwinds
  numberOfUniwnds: BigInt!

   # derived fields
  builds: [Build!]! @derivedFrom(field: "position")
  liquidates: [Liquidate!]! @derivedFrom(field: "position")
  unwinds: [Unwind!]! @derivedFrom(field: "position")
}

type Transaction @entity {
  # txn hash
  id: ID!
  # block txn was included in
  blockNumber: BigInt!
  # timestamp txn was confirmed
  timestamp: BigInt!
  # gas settings during txn execution
  gasLimit: BigInt!
  gasPrice: BigInt!
  # derived values
  builds: [Build!]! @derivedFrom(field: "transaction")
  unwinds: [Unwind!]! @derivedFrom(field: "transaction")
  liquidates: [Liquidate!]! @derivedFrom(field: "transaction")
}

type Build @entity {
  # market contract concat'd with position id
  id: ID!
  # account performing action
  owner: Account!
  # position entitie
  position: Position!
  # current position oi
  currentOi: BigInt!
  # current position debt
  currentDebt: BigInt!
  # position side taken
  isLong: Boolean!
  # price at time of build
  price: BigInt!
  # Fee amount of this build
  feeAmount: BigInt!
  # current collateral backing position
  collateral: BigInt!
  # current value of position
  value: BigInt!
  # timestamp of transaction
  timestamp: BigInt!
  # transaction the position was built in
  transaction: Transaction!
}

type Unwind @entity {
  # market contract concat'd with position id concat'd with unwind number
  id: ID!
  # account performing action
  owner: Account!
  # position id
  position: Position!
  # unwind number
  unwindNumber: BigInt!
  # current position oi
  currentOi: BigInt!
  # current position debt
  currentDebt: BigInt!
  # position side taken
  isLong: Boolean!
  # price at time of unwind
  price: BigInt!
  # fraction of unwind
  fraction: BigInt!
  # amount of OVL transferred to the owner
  transferAmount: BigInt!
  # PnL of this unwind
  pnl: BigInt!
  # Fee amount of this unwind
  feeAmount: BigInt!
  # fraction of initial collateral of this unwind
  size: BigInt!
  # total ovl minted/burned in this unwind
  mint: BigInt!
  # current collateral backing position
  collateral: BigInt!
  # current value of position
  value: BigInt!
  # timestamp of transaction
  timestamp: BigInt!
  # transaction the position was unwinded in
  transaction: Transaction!
}

type Liquidate @entity {
  # market contract concat'd with position id
  id: ID!
  # owner of the position
  owner: Account!
  # address performing the transaction
  sender: Account!
  # position id
  position: Position!
  # current position oi
  currentOi: BigInt!
  # current position debt
  currentDebt: BigInt!
  # position side taken
  isLong: Boolean!
  # price at time of liquidate
  price: BigInt!
  # total ovl minted/burned in this transaction
  mint: BigInt!
  # current collateral backing position
  collateral: BigInt!
  # current value of position
  value: BigInt!
  # timestamp of transaction
  timestamp: BigInt!
  # transaction the position was liquidated in
  transaction: Transaction!
}

type Account @entity {
  # account address
  id: ID!
  # derived account info
  positions: [Position!]! @derivedFrom(field: "owner")
  builds: [Build!]! @derivedFrom(field: "owner")
  unwinds: [Unwind!]! @derivedFrom(field: "owner")
  liquidates: [Liquidate!]! @derivedFrom(field: "owner")
}
