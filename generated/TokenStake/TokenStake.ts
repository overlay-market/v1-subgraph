// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ContractURIUpdated extends ethereum.Event {
  get params(): ContractURIUpdated__Params {
    return new ContractURIUpdated__Params(this);
  }
}

export class ContractURIUpdated__Params {
  _event: ContractURIUpdated;

  constructor(event: ContractURIUpdated) {
    this._event = event;
  }

  get prevURI(): string {
    return this._event.parameters[0].value.toString();
  }

  get newURI(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class RewardTokensDepositedByAdmin extends ethereum.Event {
  get params(): RewardTokensDepositedByAdmin__Params {
    return new RewardTokensDepositedByAdmin__Params(this);
  }
}

export class RewardTokensDepositedByAdmin__Params {
  _event: RewardTokensDepositedByAdmin;

  constructor(event: RewardTokensDepositedByAdmin) {
    this._event = event;
  }

  get _amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class RewardTokensWithdrawnByAdmin extends ethereum.Event {
  get params(): RewardTokensWithdrawnByAdmin__Params {
    return new RewardTokensWithdrawnByAdmin__Params(this);
  }
}

export class RewardTokensWithdrawnByAdmin__Params {
  _event: RewardTokensWithdrawnByAdmin;

  constructor(event: RewardTokensWithdrawnByAdmin) {
    this._event = event;
  }

  get _amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class RewardsClaimed extends ethereum.Event {
  get params(): RewardsClaimed__Params {
    return new RewardsClaimed__Params(this);
  }
}

export class RewardsClaimed__Params {
  _event: RewardsClaimed;

  constructor(event: RewardsClaimed) {
    this._event = event;
  }

  get staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get rewardAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class TokensStaked extends ethereum.Event {
  get params(): TokensStaked__Params {
    return new TokensStaked__Params(this);
  }
}

export class TokensStaked__Params {
  _event: TokensStaked;

  constructor(event: TokensStaked) {
    this._event = event;
  }

  get staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TokensWithdrawn extends ethereum.Event {
  get params(): TokensWithdrawn__Params {
    return new TokensWithdrawn__Params(this);
  }
}

export class TokensWithdrawn__Params {
  _event: TokensWithdrawn;

  constructor(event: TokensWithdrawn) {
    this._event = event;
  }

  get staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpdatedMinStakeAmount extends ethereum.Event {
  get params(): UpdatedMinStakeAmount__Params {
    return new UpdatedMinStakeAmount__Params(this);
  }
}

export class UpdatedMinStakeAmount__Params {
  _event: UpdatedMinStakeAmount;

  constructor(event: UpdatedMinStakeAmount) {
    this._event = event;
  }

  get oldAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpdatedRewardRatio extends ethereum.Event {
  get params(): UpdatedRewardRatio__Params {
    return new UpdatedRewardRatio__Params(this);
  }
}

export class UpdatedRewardRatio__Params {
  _event: UpdatedRewardRatio;

  constructor(event: UpdatedRewardRatio) {
    this._event = event;
  }

  get oldNumerator(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newNumerator(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get oldDenominator(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get newDenominator(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class UpdatedTimeUnit extends ethereum.Event {
  get params(): UpdatedTimeUnit__Params {
    return new UpdatedTimeUnit__Params(this);
  }
}

export class UpdatedTimeUnit__Params {
  _event: UpdatedTimeUnit;

  constructor(event: UpdatedTimeUnit) {
    this._event = event;
  }

  get oldTimeUnit(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newTimeUnit(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TokenStake__getRewardRatioResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  get_numerator(): BigInt {
    return this.value0;
  }

  get_denominator(): BigInt {
    return this.value1;
  }
}

export class TokenStake__getStakeInfoResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  get_tokensStaked(): BigInt {
    return this.value0;
  }

  get_rewards(): BigInt {
    return this.value1;
  }
}

export class TokenStake__stakersResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getAmountStaked(): BigInt {
    return this.value0;
  }

  getTimeOfLastUpdate(): BigInt {
    return this.value1;
  }

  getUnclaimedRewards(): BigInt {
    return this.value2;
  }

  getConditionIdOflastUpdate(): BigInt {
    return this.value3;
  }
}

export class TokenStake extends ethereum.SmartContract {
  static bind(address: Address): TokenStake {
    return new TokenStake("TokenStake", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  contractType(): Bytes {
    let result = super.call("contractType", "contractType():(bytes32)", []);

    return result[0].toBytes();
  }

  try_contractType(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("contractType", "contractType():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  contractURI(): string {
    let result = super.call("contractURI", "contractURI():(string)", []);

    return result[0].toString();
  }

  try_contractURI(): ethereum.CallResult<string> {
    let result = super.tryCall("contractURI", "contractURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  contractVersion(): i32 {
    let result = super.call("contractVersion", "contractVersion():(uint8)", []);

    return result[0].toI32();
  }

  try_contractVersion(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "contractVersion",
      "contractVersion():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getRewardRatio(): TokenStake__getRewardRatioResult {
    let result = super.call(
      "getRewardRatio",
      "getRewardRatio():(uint256,uint256)",
      []
    );

    return new TokenStake__getRewardRatioResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getRewardRatio(): ethereum.CallResult<TokenStake__getRewardRatioResult> {
    let result = super.tryCall(
      "getRewardRatio",
      "getRewardRatio():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TokenStake__getRewardRatioResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getRewardTokenBalance(): BigInt {
    let result = super.call(
      "getRewardTokenBalance",
      "getRewardTokenBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getRewardTokenBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRewardTokenBalance",
      "getRewardTokenBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRoleMember(role: Bytes, index: BigInt): Address {
    let result = super.call(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toAddress();
  }

  try_getRoleMember(role: Bytes, index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleMemberCount(role: Bytes): BigInt {
    let result = super.call(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );

    return result[0].toBigInt();
  }

  try_getRoleMemberCount(role: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStakeInfo(_staker: Address): TokenStake__getStakeInfoResult {
    let result = super.call(
      "getStakeInfo",
      "getStakeInfo(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_staker)]
    );

    return new TokenStake__getStakeInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getStakeInfo(
    _staker: Address
  ): ethereum.CallResult<TokenStake__getStakeInfoResult> {
    let result = super.tryCall(
      "getStakeInfo",
      "getStakeInfo(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_staker)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TokenStake__getStakeInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getTimeUnit(): BigInt {
    let result = super.call("getTimeUnit", "getTimeUnit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTimeUnit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getTimeUnit", "getTimeUnit():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasRoleWithSwitch(role: Bytes, account: Address): boolean {
    let result = super.call(
      "hasRoleWithSwitch",
      "hasRoleWithSwitch(bytes32,address):(bool)",
      [ethereum.Value.fromFixedBytes(role), ethereum.Value.fromAddress(account)]
    );

    return result[0].toBoolean();
  }

  try_hasRoleWithSwitch(
    role: Bytes,
    account: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasRoleWithSwitch",
      "hasRoleWithSwitch(bytes32,address):(bool)",
      [ethereum.Value.fromFixedBytes(role), ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isTrustedForwarder(forwarder: Address): boolean {
    let result = super.call(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );

    return result[0].toBoolean();
  }

  try_isTrustedForwarder(forwarder: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  multicall(data: Array<Bytes>): Array<Bytes> {
    let result = super.call("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);

    return result[0].toBytesArray();
  }

  try_multicall(data: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  rewardToken(): Address {
    let result = super.call("rewardToken", "rewardToken():(address)", []);

    return result[0].toAddress();
  }

  try_rewardToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("rewardToken", "rewardToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardTokenDecimals(): BigInt {
    let result = super.call(
      "rewardTokenDecimals",
      "rewardTokenDecimals():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rewardTokenDecimals(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardTokenDecimals",
      "rewardTokenDecimals():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakers(param0: Address): TokenStake__stakersResult {
    let result = super.call(
      "stakers",
      "stakers(address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new TokenStake__stakersResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_stakers(param0: Address): ethereum.CallResult<TokenStake__stakersResult> {
    let result = super.tryCall(
      "stakers",
      "stakers(address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TokenStake__stakersResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  stakersArray(param0: BigInt): Address {
    let result = super.call("stakersArray", "stakersArray(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_stakersArray(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "stakersArray",
      "stakersArray(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakingToken(): Address {
    let result = super.call("stakingToken", "stakingToken():(address)", []);

    return result[0].toAddress();
  }

  try_stakingToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("stakingToken", "stakingToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakingTokenBalance(): BigInt {
    let result = super.call(
      "stakingTokenBalance",
      "stakingTokenBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_stakingTokenBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakingTokenBalance",
      "stakingTokenBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakingTokenDecimals(): BigInt {
    let result = super.call(
      "stakingTokenDecimals",
      "stakingTokenDecimals():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_stakingTokenDecimals(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakingTokenDecimals",
      "stakingTokenDecimals():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _nativeTokenWrapper(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ClaimRewardsCall extends ethereum.Call {
  get inputs(): ClaimRewardsCall__Inputs {
    return new ClaimRewardsCall__Inputs(this);
  }

  get outputs(): ClaimRewardsCall__Outputs {
    return new ClaimRewardsCall__Outputs(this);
  }
}

export class ClaimRewardsCall__Inputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }
}

export class ClaimRewardsCall__Outputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }
}

export class DepositRewardTokensCall extends ethereum.Call {
  get inputs(): DepositRewardTokensCall__Inputs {
    return new DepositRewardTokensCall__Inputs(this);
  }

  get outputs(): DepositRewardTokensCall__Outputs {
    return new DepositRewardTokensCall__Outputs(this);
  }
}

export class DepositRewardTokensCall__Inputs {
  _call: DepositRewardTokensCall;

  constructor(call: DepositRewardTokensCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositRewardTokensCall__Outputs {
  _call: DepositRewardTokensCall;

  constructor(call: DepositRewardTokensCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _defaultAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _contractURI(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _trustedForwarders(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get _rewardToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _stakingToken(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _timeUnit(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _rewardRatioNumerator(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _rewardRatioDenominator(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetContractURICall extends ethereum.Call {
  get inputs(): SetContractURICall__Inputs {
    return new SetContractURICall__Inputs(this);
  }

  get outputs(): SetContractURICall__Outputs {
    return new SetContractURICall__Outputs(this);
  }
}

export class SetContractURICall__Inputs {
  _call: SetContractURICall;

  constructor(call: SetContractURICall) {
    this._call = call;
  }

  get _uri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetContractURICall__Outputs {
  _call: SetContractURICall;

  constructor(call: SetContractURICall) {
    this._call = call;
  }
}

export class SetRewardRatioCall extends ethereum.Call {
  get inputs(): SetRewardRatioCall__Inputs {
    return new SetRewardRatioCall__Inputs(this);
  }

  get outputs(): SetRewardRatioCall__Outputs {
    return new SetRewardRatioCall__Outputs(this);
  }
}

export class SetRewardRatioCall__Inputs {
  _call: SetRewardRatioCall;

  constructor(call: SetRewardRatioCall) {
    this._call = call;
  }

  get _numerator(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _denominator(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetRewardRatioCall__Outputs {
  _call: SetRewardRatioCall;

  constructor(call: SetRewardRatioCall) {
    this._call = call;
  }
}

export class SetTimeUnitCall extends ethereum.Call {
  get inputs(): SetTimeUnitCall__Inputs {
    return new SetTimeUnitCall__Inputs(this);
  }

  get outputs(): SetTimeUnitCall__Outputs {
    return new SetTimeUnitCall__Outputs(this);
  }
}

export class SetTimeUnitCall__Inputs {
  _call: SetTimeUnitCall;

  constructor(call: SetTimeUnitCall) {
    this._call = call;
  }

  get _timeUnit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetTimeUnitCall__Outputs {
  _call: SetTimeUnitCall;

  constructor(call: SetTimeUnitCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawRewardTokensCall extends ethereum.Call {
  get inputs(): WithdrawRewardTokensCall__Inputs {
    return new WithdrawRewardTokensCall__Inputs(this);
  }

  get outputs(): WithdrawRewardTokensCall__Outputs {
    return new WithdrawRewardTokensCall__Outputs(this);
  }
}

export class WithdrawRewardTokensCall__Inputs {
  _call: WithdrawRewardTokensCall;

  constructor(call: WithdrawRewardTokensCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawRewardTokensCall__Outputs {
  _call: WithdrawRewardTokensCall;

  constructor(call: WithdrawRewardTokensCall) {
    this._call = call;
  }
}
