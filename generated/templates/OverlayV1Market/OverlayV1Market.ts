// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Build extends ethereum.Event {
  get params(): Build__Params {
    return new Build__Params(this);
  }
}

export class Build__Params {
  _event: Build;

  constructor(event: Build) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get positionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get oi(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get debt(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get isLong(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }

  get price(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class EmergencyWithdraw extends ethereum.Event {
  get params(): EmergencyWithdraw__Params {
    return new EmergencyWithdraw__Params(this);
  }
}

export class EmergencyWithdraw__Params {
  _event: EmergencyWithdraw;

  constructor(event: EmergencyWithdraw) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get positionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get collateral(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Liquidate extends ethereum.Event {
  get params(): Liquidate__Params {
    return new Liquidate__Params(this);
  }
}

export class Liquidate__Params {
  _event: Liquidate;

  constructor(event: Liquidate) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get positionId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get mint(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Unwind extends ethereum.Event {
  get params(): Unwind__Params {
    return new Unwind__Params(this);
  }
}

export class Unwind__Params {
  _event: Unwind;

  constructor(event: Unwind) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get positionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get fraction(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get mint(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class OverlayV1Market__askInputDataStruct extends ethereum.Tuple {
  get timestamp(): BigInt {
    return this[0].toBigInt();
  }

  get microWindow(): BigInt {
    return this[1].toBigInt();
  }

  get macroWindow(): BigInt {
    return this[2].toBigInt();
  }

  get priceOverMicroWindow(): BigInt {
    return this[3].toBigInt();
  }

  get priceOverMacroWindow(): BigInt {
    return this[4].toBigInt();
  }

  get priceOneMacroWindowAgo(): BigInt {
    return this[5].toBigInt();
  }

  get reserveOverMicroWindow(): BigInt {
    return this[6].toBigInt();
  }

  get hasReserve(): boolean {
    return this[7].toBoolean();
  }
}

export class OverlayV1Market__backRunBoundInputDataStruct extends ethereum.Tuple {
  get timestamp(): BigInt {
    return this[0].toBigInt();
  }

  get microWindow(): BigInt {
    return this[1].toBigInt();
  }

  get macroWindow(): BigInt {
    return this[2].toBigInt();
  }

  get priceOverMicroWindow(): BigInt {
    return this[3].toBigInt();
  }

  get priceOverMacroWindow(): BigInt {
    return this[4].toBigInt();
  }

  get priceOneMacroWindowAgo(): BigInt {
    return this[5].toBigInt();
  }

  get reserveOverMicroWindow(): BigInt {
    return this[6].toBigInt();
  }

  get hasReserve(): boolean {
    return this[7].toBoolean();
  }
}

export class OverlayV1Market__bidInputDataStruct extends ethereum.Tuple {
  get timestamp(): BigInt {
    return this[0].toBigInt();
  }

  get microWindow(): BigInt {
    return this[1].toBigInt();
  }

  get macroWindow(): BigInt {
    return this[2].toBigInt();
  }

  get priceOverMicroWindow(): BigInt {
    return this[3].toBigInt();
  }

  get priceOverMacroWindow(): BigInt {
    return this[4].toBigInt();
  }

  get priceOneMacroWindowAgo(): BigInt {
    return this[5].toBigInt();
  }

  get reserveOverMicroWindow(): BigInt {
    return this[6].toBigInt();
  }

  get hasReserve(): boolean {
    return this[7].toBoolean();
  }
}

export class OverlayV1Market__capNotionalAdjustedForBoundsInputDataStruct extends ethereum.Tuple {
  get timestamp(): BigInt {
    return this[0].toBigInt();
  }

  get microWindow(): BigInt {
    return this[1].toBigInt();
  }

  get macroWindow(): BigInt {
    return this[2].toBigInt();
  }

  get priceOverMicroWindow(): BigInt {
    return this[3].toBigInt();
  }

  get priceOverMacroWindow(): BigInt {
    return this[4].toBigInt();
  }

  get priceOneMacroWindowAgo(): BigInt {
    return this[5].toBigInt();
  }

  get reserveOverMicroWindow(): BigInt {
    return this[6].toBigInt();
  }

  get hasReserve(): boolean {
    return this[7].toBoolean();
  }
}

export class OverlayV1Market__circuitBreakerInputSnapshotStruct extends ethereum.Tuple {
  get timestamp(): BigInt {
    return this[0].toBigInt();
  }

  get window(): BigInt {
    return this[1].toBigInt();
  }

  get accumulator(): BigInt {
    return this[2].toBigInt();
  }
}

export class OverlayV1Market__dataIsValidInputDataStruct extends ethereum.Tuple {
  get timestamp(): BigInt {
    return this[0].toBigInt();
  }

  get microWindow(): BigInt {
    return this[1].toBigInt();
  }

  get macroWindow(): BigInt {
    return this[2].toBigInt();
  }

  get priceOverMicroWindow(): BigInt {
    return this[3].toBigInt();
  }

  get priceOverMacroWindow(): BigInt {
    return this[4].toBigInt();
  }

  get priceOneMacroWindowAgo(): BigInt {
    return this[5].toBigInt();
  }

  get reserveOverMicroWindow(): BigInt {
    return this[6].toBigInt();
  }

  get hasReserve(): boolean {
    return this[7].toBoolean();
  }
}

export class OverlayV1Market__frontRunBoundInputDataStruct extends ethereum.Tuple {
  get timestamp(): BigInt {
    return this[0].toBigInt();
  }

  get microWindow(): BigInt {
    return this[1].toBigInt();
  }

  get macroWindow(): BigInt {
    return this[2].toBigInt();
  }

  get priceOverMicroWindow(): BigInt {
    return this[3].toBigInt();
  }

  get priceOverMacroWindow(): BigInt {
    return this[4].toBigInt();
  }

  get priceOneMacroWindowAgo(): BigInt {
    return this[5].toBigInt();
  }

  get reserveOverMicroWindow(): BigInt {
    return this[6].toBigInt();
  }

  get hasReserve(): boolean {
    return this[7].toBoolean();
  }
}

export class OverlayV1Market__oiAfterFundingResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class OverlayV1Market__positionsResult {
  value0: BigInt;
  value1: BigInt;
  value2: i32;
  value3: i32;
  value4: boolean;
  value5: boolean;
  value6: BigInt;
  value7: i32;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: i32,
    value3: i32,
    value4: boolean,
    value5: boolean,
    value6: BigInt,
    value7: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromI32(this.value2));
    map.set("value3", ethereum.Value.fromI32(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set(
      "value7",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value7))
    );
    return map;
  }

  getNotionalInitial(): BigInt {
    return this.value0;
  }

  getDebtInitial(): BigInt {
    return this.value1;
  }

  getMidTick(): i32 {
    return this.value2;
  }

  getEntryTick(): i32 {
    return this.value3;
  }

  getIsLong(): boolean {
    return this.value4;
  }

  getLiquidated(): boolean {
    return this.value5;
  }

  getOiShares(): BigInt {
    return this.value6;
  }

  getFractionRemaining(): i32 {
    return this.value7;
  }
}

export class OverlayV1Market__snapshotMintedResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromSignedBigInt(this.value2));
    return map;
  }

  getTimestamp(): BigInt {
    return this.value0;
  }

  getWindow(): BigInt {
    return this.value1;
  }

  getAccumulator(): BigInt {
    return this.value2;
  }
}

export class OverlayV1Market__snapshotVolumeAskResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromSignedBigInt(this.value2));
    return map;
  }

  getTimestamp(): BigInt {
    return this.value0;
  }

  getWindow(): BigInt {
    return this.value1;
  }

  getAccumulator(): BigInt {
    return this.value2;
  }
}

export class OverlayV1Market__snapshotVolumeBidResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromSignedBigInt(this.value2));
    return map;
  }

  getTimestamp(): BigInt {
    return this.value0;
  }

  getWindow(): BigInt {
    return this.value1;
  }

  getAccumulator(): BigInt {
    return this.value2;
  }
}

export class OverlayV1Market__updateResultValue0Struct extends ethereum.Tuple {
  get timestamp(): BigInt {
    return this[0].toBigInt();
  }

  get microWindow(): BigInt {
    return this[1].toBigInt();
  }

  get macroWindow(): BigInt {
    return this[2].toBigInt();
  }

  get priceOverMicroWindow(): BigInt {
    return this[3].toBigInt();
  }

  get priceOverMacroWindow(): BigInt {
    return this[4].toBigInt();
  }

  get priceOneMacroWindowAgo(): BigInt {
    return this[5].toBigInt();
  }

  get reserveOverMicroWindow(): BigInt {
    return this[6].toBigInt();
  }

  get hasReserve(): boolean {
    return this[7].toBoolean();
  }
}

export class OverlayV1Market extends ethereum.SmartContract {
  static bind(address: Address): OverlayV1Market {
    return new OverlayV1Market("OverlayV1Market", address);
  }

  ask(data: OverlayV1Market__askInputDataStruct, volume: BigInt): BigInt {
    let result = super.call(
      "ask",
      "ask((uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool),uint256):(uint256)",
      [
        ethereum.Value.fromTuple(data),
        ethereum.Value.fromUnsignedBigInt(volume)
      ]
    );

    return result[0].toBigInt();
  }

  try_ask(
    data: OverlayV1Market__askInputDataStruct,
    volume: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ask",
      "ask((uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool),uint256):(uint256)",
      [
        ethereum.Value.fromTuple(data),
        ethereum.Value.fromUnsignedBigInt(volume)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  backRunBound(data: OverlayV1Market__backRunBoundInputDataStruct): BigInt {
    let result = super.call(
      "backRunBound",
      "backRunBound((uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool)):(uint256)",
      [ethereum.Value.fromTuple(data)]
    );

    return result[0].toBigInt();
  }

  try_backRunBound(
    data: OverlayV1Market__backRunBoundInputDataStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "backRunBound",
      "backRunBound((uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool)):(uint256)",
      [ethereum.Value.fromTuple(data)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bid(data: OverlayV1Market__bidInputDataStruct, volume: BigInt): BigInt {
    let result = super.call(
      "bid",
      "bid((uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool),uint256):(uint256)",
      [
        ethereum.Value.fromTuple(data),
        ethereum.Value.fromUnsignedBigInt(volume)
      ]
    );

    return result[0].toBigInt();
  }

  try_bid(
    data: OverlayV1Market__bidInputDataStruct,
    volume: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "bid",
      "bid((uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool),uint256):(uint256)",
      [
        ethereum.Value.fromTuple(data),
        ethereum.Value.fromUnsignedBigInt(volume)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  build(
    collateral: BigInt,
    leverage: BigInt,
    isLong: boolean,
    priceLimit: BigInt
  ): BigInt {
    let result = super.call(
      "build",
      "build(uint256,uint256,bool,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(collateral),
        ethereum.Value.fromUnsignedBigInt(leverage),
        ethereum.Value.fromBoolean(isLong),
        ethereum.Value.fromUnsignedBigInt(priceLimit)
      ]
    );

    return result[0].toBigInt();
  }

  try_build(
    collateral: BigInt,
    leverage: BigInt,
    isLong: boolean,
    priceLimit: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "build",
      "build(uint256,uint256,bool,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(collateral),
        ethereum.Value.fromUnsignedBigInt(leverage),
        ethereum.Value.fromBoolean(isLong),
        ethereum.Value.fromUnsignedBigInt(priceLimit)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  capNotionalAdjustedForBounds(
    data: OverlayV1Market__capNotionalAdjustedForBoundsInputDataStruct,
    cap: BigInt
  ): BigInt {
    let result = super.call(
      "capNotionalAdjustedForBounds",
      "capNotionalAdjustedForBounds((uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool),uint256):(uint256)",
      [ethereum.Value.fromTuple(data), ethereum.Value.fromUnsignedBigInt(cap)]
    );

    return result[0].toBigInt();
  }

  try_capNotionalAdjustedForBounds(
    data: OverlayV1Market__capNotionalAdjustedForBoundsInputDataStruct,
    cap: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "capNotionalAdjustedForBounds",
      "capNotionalAdjustedForBounds((uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool),uint256):(uint256)",
      [ethereum.Value.fromTuple(data), ethereum.Value.fromUnsignedBigInt(cap)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  capOiAdjustedForCircuitBreaker(cap: BigInt): BigInt {
    let result = super.call(
      "capOiAdjustedForCircuitBreaker",
      "capOiAdjustedForCircuitBreaker(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(cap)]
    );

    return result[0].toBigInt();
  }

  try_capOiAdjustedForCircuitBreaker(cap: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "capOiAdjustedForCircuitBreaker",
      "capOiAdjustedForCircuitBreaker(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(cap)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  circuitBreaker(
    snapshot: OverlayV1Market__circuitBreakerInputSnapshotStruct,
    cap: BigInt
  ): BigInt {
    let result = super.call(
      "circuitBreaker",
      "circuitBreaker((uint32,uint32,int192),uint256):(uint256)",
      [
        ethereum.Value.fromTuple(snapshot),
        ethereum.Value.fromUnsignedBigInt(cap)
      ]
    );

    return result[0].toBigInt();
  }

  try_circuitBreaker(
    snapshot: OverlayV1Market__circuitBreakerInputSnapshotStruct,
    cap: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "circuitBreaker",
      "circuitBreaker((uint32,uint32,int192),uint256):(uint256)",
      [
        ethereum.Value.fromTuple(snapshot),
        ethereum.Value.fromUnsignedBigInt(cap)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dataIsValid(data: OverlayV1Market__dataIsValidInputDataStruct): boolean {
    let result = super.call(
      "dataIsValid",
      "dataIsValid((uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool)):(bool)",
      [ethereum.Value.fromTuple(data)]
    );

    return result[0].toBoolean();
  }

  try_dataIsValid(
    data: OverlayV1Market__dataIsValidInputDataStruct
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "dataIsValid",
      "dataIsValid((uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool)):(bool)",
      [ethereum.Value.fromTuple(data)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  dpUpperLimit(): BigInt {
    let result = super.call("dpUpperLimit", "dpUpperLimit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_dpUpperLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("dpUpperLimit", "dpUpperLimit():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  feed(): Address {
    let result = super.call("feed", "feed():(address)", []);

    return result[0].toAddress();
  }

  try_feed(): ethereum.CallResult<Address> {
    let result = super.tryCall("feed", "feed():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  frontRunBound(data: OverlayV1Market__frontRunBoundInputDataStruct): BigInt {
    let result = super.call(
      "frontRunBound",
      "frontRunBound((uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool)):(uint256)",
      [ethereum.Value.fromTuple(data)]
    );

    return result[0].toBigInt();
  }

  try_frontRunBound(
    data: OverlayV1Market__frontRunBoundInputDataStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "frontRunBound",
      "frontRunBound((uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool)):(uint256)",
      [ethereum.Value.fromTuple(data)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isShutdown(): boolean {
    let result = super.call("isShutdown", "isShutdown():(bool)", []);

    return result[0].toBoolean();
  }

  try_isShutdown(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isShutdown", "isShutdown():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  oiAfterFunding(
    oiOverweight: BigInt,
    oiUnderweight: BigInt,
    timeElapsed: BigInt
  ): OverlayV1Market__oiAfterFundingResult {
    let result = super.call(
      "oiAfterFunding",
      "oiAfterFunding(uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(oiOverweight),
        ethereum.Value.fromUnsignedBigInt(oiUnderweight),
        ethereum.Value.fromUnsignedBigInt(timeElapsed)
      ]
    );

    return new OverlayV1Market__oiAfterFundingResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_oiAfterFunding(
    oiOverweight: BigInt,
    oiUnderweight: BigInt,
    timeElapsed: BigInt
  ): ethereum.CallResult<OverlayV1Market__oiAfterFundingResult> {
    let result = super.tryCall(
      "oiAfterFunding",
      "oiAfterFunding(uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(oiOverweight),
        ethereum.Value.fromUnsignedBigInt(oiUnderweight),
        ethereum.Value.fromUnsignedBigInt(timeElapsed)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OverlayV1Market__oiAfterFundingResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  oiFromNotional(notional: BigInt, midPrice: BigInt): BigInt {
    let result = super.call(
      "oiFromNotional",
      "oiFromNotional(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(notional),
        ethereum.Value.fromUnsignedBigInt(midPrice)
      ]
    );

    return result[0].toBigInt();
  }

  try_oiFromNotional(
    notional: BigInt,
    midPrice: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "oiFromNotional",
      "oiFromNotional(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(notional),
        ethereum.Value.fromUnsignedBigInt(midPrice)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  oiLong(): BigInt {
    let result = super.call("oiLong", "oiLong():(uint256)", []);

    return result[0].toBigInt();
  }

  try_oiLong(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("oiLong", "oiLong():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  oiLongShares(): BigInt {
    let result = super.call("oiLongShares", "oiLongShares():(uint256)", []);

    return result[0].toBigInt();
  }

  try_oiLongShares(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("oiLongShares", "oiLongShares():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  oiShort(): BigInt {
    let result = super.call("oiShort", "oiShort():(uint256)", []);

    return result[0].toBigInt();
  }

  try_oiShort(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("oiShort", "oiShort():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  oiShortShares(): BigInt {
    let result = super.call("oiShortShares", "oiShortShares():(uint256)", []);

    return result[0].toBigInt();
  }

  try_oiShortShares(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "oiShortShares",
      "oiShortShares():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ovl(): Address {
    let result = super.call("ovl", "ovl():(address)", []);

    return result[0].toAddress();
  }

  try_ovl(): ethereum.CallResult<Address> {
    let result = super.tryCall("ovl", "ovl():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  params(param0: BigInt): BigInt {
    let result = super.call("params", "params(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_params(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("params", "params(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  positions(param0: Bytes): OverlayV1Market__positionsResult {
    let result = super.call(
      "positions",
      "positions(bytes32):(uint96,uint96,int24,int24,bool,bool,uint240,uint16)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new OverlayV1Market__positionsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toBoolean(),
      result[5].toBoolean(),
      result[6].toBigInt(),
      result[7].toI32()
    );
  }

  try_positions(
    param0: Bytes
  ): ethereum.CallResult<OverlayV1Market__positionsResult> {
    let result = super.tryCall(
      "positions",
      "positions(bytes32):(uint96,uint96,int24,int24,bool,bool,uint240,uint16)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OverlayV1Market__positionsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toBoolean(),
        value[5].toBoolean(),
        value[6].toBigInt(),
        value[7].toI32()
      )
    );
  }

  snapshotMinted(): OverlayV1Market__snapshotMintedResult {
    let result = super.call(
      "snapshotMinted",
      "snapshotMinted():(uint32,uint32,int192)",
      []
    );

    return new OverlayV1Market__snapshotMintedResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_snapshotMinted(): ethereum.CallResult<
    OverlayV1Market__snapshotMintedResult
  > {
    let result = super.tryCall(
      "snapshotMinted",
      "snapshotMinted():(uint32,uint32,int192)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OverlayV1Market__snapshotMintedResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  snapshotVolumeAsk(): OverlayV1Market__snapshotVolumeAskResult {
    let result = super.call(
      "snapshotVolumeAsk",
      "snapshotVolumeAsk():(uint32,uint32,int192)",
      []
    );

    return new OverlayV1Market__snapshotVolumeAskResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_snapshotVolumeAsk(): ethereum.CallResult<
    OverlayV1Market__snapshotVolumeAskResult
  > {
    let result = super.tryCall(
      "snapshotVolumeAsk",
      "snapshotVolumeAsk():(uint32,uint32,int192)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OverlayV1Market__snapshotVolumeAskResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  snapshotVolumeBid(): OverlayV1Market__snapshotVolumeBidResult {
    let result = super.call(
      "snapshotVolumeBid",
      "snapshotVolumeBid():(uint32,uint32,int192)",
      []
    );

    return new OverlayV1Market__snapshotVolumeBidResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_snapshotVolumeBid(): ethereum.CallResult<
    OverlayV1Market__snapshotVolumeBidResult
  > {
    let result = super.tryCall(
      "snapshotVolumeBid",
      "snapshotVolumeBid():(uint32,uint32,int192)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OverlayV1Market__snapshotVolumeBidResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  timestampUpdateLast(): BigInt {
    let result = super.call(
      "timestampUpdateLast",
      "timestampUpdateLast():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_timestampUpdateLast(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "timestampUpdateLast",
      "timestampUpdateLast():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  update(): OverlayV1Market__updateResultValue0Struct {
    let result = super.call(
      "update",
      "update():((uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool))",
      []
    );

    return changetype<OverlayV1Market__updateResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_update(): ethereum.CallResult<OverlayV1Market__updateResultValue0Struct> {
    let result = super.tryCall(
      "update",
      "update():((uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<OverlayV1Market__updateResultValue0Struct>(value[0].toTuple())
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BuildCall extends ethereum.Call {
  get inputs(): BuildCall__Inputs {
    return new BuildCall__Inputs(this);
  }

  get outputs(): BuildCall__Outputs {
    return new BuildCall__Outputs(this);
  }
}

export class BuildCall__Inputs {
  _call: BuildCall;

  constructor(call: BuildCall) {
    this._call = call;
  }

  get collateral(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get leverage(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get isLong(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get priceLimit(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class BuildCall__Outputs {
  _call: BuildCall;

  constructor(call: BuildCall) {
    this._call = call;
  }

  get positionId_(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class EmergencyWithdrawCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawCall__Inputs {
    return new EmergencyWithdrawCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawCall__Outputs {
    return new EmergencyWithdrawCall__Outputs(this);
  }
}

export class EmergencyWithdrawCall__Inputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }

  get positionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EmergencyWithdrawCall__Outputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _params(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class LiquidateCall extends ethereum.Call {
  get inputs(): LiquidateCall__Inputs {
    return new LiquidateCall__Inputs(this);
  }

  get outputs(): LiquidateCall__Outputs {
    return new LiquidateCall__Outputs(this);
  }
}

export class LiquidateCall__Inputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get positionId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class LiquidateCall__Outputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }
}

export class SetRiskParamCall extends ethereum.Call {
  get inputs(): SetRiskParamCall__Inputs {
    return new SetRiskParamCall__Inputs(this);
  }

  get outputs(): SetRiskParamCall__Outputs {
    return new SetRiskParamCall__Outputs(this);
  }
}

export class SetRiskParamCall__Inputs {
  _call: SetRiskParamCall;

  constructor(call: SetRiskParamCall) {
    this._call = call;
  }

  get name(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetRiskParamCall__Outputs {
  _call: SetRiskParamCall;

  constructor(call: SetRiskParamCall) {
    this._call = call;
  }
}

export class ShutdownCall extends ethereum.Call {
  get inputs(): ShutdownCall__Inputs {
    return new ShutdownCall__Inputs(this);
  }

  get outputs(): ShutdownCall__Outputs {
    return new ShutdownCall__Outputs(this);
  }
}

export class ShutdownCall__Inputs {
  _call: ShutdownCall;

  constructor(call: ShutdownCall) {
    this._call = call;
  }
}

export class ShutdownCall__Outputs {
  _call: ShutdownCall;

  constructor(call: ShutdownCall) {
    this._call = call;
  }
}

export class UnwindCall extends ethereum.Call {
  get inputs(): UnwindCall__Inputs {
    return new UnwindCall__Inputs(this);
  }

  get outputs(): UnwindCall__Outputs {
    return new UnwindCall__Outputs(this);
  }
}

export class UnwindCall__Inputs {
  _call: UnwindCall;

  constructor(call: UnwindCall) {
    this._call = call;
  }

  get positionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get fraction(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get priceLimit(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UnwindCall__Outputs {
  _call: UnwindCall;

  constructor(call: UnwindCall) {
    this._call = call;
  }
}

export class UpdateCall extends ethereum.Call {
  get inputs(): UpdateCall__Inputs {
    return new UpdateCall__Inputs(this);
  }

  get outputs(): UpdateCall__Outputs {
    return new UpdateCall__Outputs(this);
  }
}

export class UpdateCall__Inputs {
  _call: UpdateCall;

  constructor(call: UpdateCall) {
    this._call = call;
  }
}

export class UpdateCall__Outputs {
  _call: UpdateCall;

  constructor(call: UpdateCall) {
    this._call = call;
  }

  get value0(): UpdateCallValue0Struct {
    return changetype<UpdateCallValue0Struct>(
      this._call.outputValues[0].value.toTuple()
    );
  }
}

export class UpdateCallValue0Struct extends ethereum.Tuple {
  get timestamp(): BigInt {
    return this[0].toBigInt();
  }

  get microWindow(): BigInt {
    return this[1].toBigInt();
  }

  get macroWindow(): BigInt {
    return this[2].toBigInt();
  }

  get priceOverMicroWindow(): BigInt {
    return this[3].toBigInt();
  }

  get priceOverMacroWindow(): BigInt {
    return this[4].toBigInt();
  }

  get priceOneMacroWindowAgo(): BigInt {
    return this[5].toBigInt();
  }

  get reserveOverMicroWindow(): BigInt {
    return this[6].toBigInt();
  }

  get hasReserve(): boolean {
    return this[7].toBoolean();
  }
}
