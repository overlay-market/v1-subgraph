// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OverlayV1PositionState__dataResultData_Struct extends ethereum.Tuple {
  get timestamp(): BigInt {
    return this[0].toBigInt();
  }

  get microWindow(): BigInt {
    return this[1].toBigInt();
  }

  get macroWindow(): BigInt {
    return this[2].toBigInt();
  }

  get priceOverMicroWindow(): BigInt {
    return this[3].toBigInt();
  }

  get priceOverMacroWindow(): BigInt {
    return this[4].toBigInt();
  }

  get priceOneMacroWindowAgo(): BigInt {
    return this[5].toBigInt();
  }

  get reserveOverMicroWindow(): BigInt {
    return this[6].toBigInt();
  }

  get hasReserve(): boolean {
    return this[7].toBoolean();
  }
}

export class OverlayV1PositionState__oisResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class OverlayV1PositionState__positionResultPosition_Struct extends ethereum.Tuple {
  get notional(): BigInt {
    return this[0].toBigInt();
  }

  get debt(): BigInt {
    return this[1].toBigInt();
  }

  get entryToMidRatio(): BigInt {
    return this[2].toBigInt();
  }

  get isLong(): boolean {
    return this[3].toBoolean();
  }

  get liquidated(): boolean {
    return this[4].toBoolean();
  }

  get oiShares(): BigInt {
    return this[5].toBigInt();
  }
}

export class OverlayV1PositionState__pricesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class OverlayV1PositionState__volumesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class OverlayV1PositionState extends ethereum.SmartContract {
  static bind(address: Address): OverlayV1PositionState {
    return new OverlayV1PositionState("OverlayV1PositionState", address);
  }

  ask(feed: Address, fractionOfCapOi: BigInt): BigInt {
    let result = super.call("ask", "ask(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(feed),
      ethereum.Value.fromUnsignedBigInt(fractionOfCapOi)
    ]);

    return result[0].toBigInt();
  }

  try_ask(feed: Address, fractionOfCapOi: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("ask", "ask(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(feed),
      ethereum.Value.fromUnsignedBigInt(fractionOfCapOi)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bid(feed: Address, fractionOfCapOi: BigInt): BigInt {
    let result = super.call("bid", "bid(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(feed),
      ethereum.Value.fromUnsignedBigInt(fractionOfCapOi)
    ]);

    return result[0].toBigInt();
  }

  try_bid(feed: Address, fractionOfCapOi: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("bid", "bid(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(feed),
      ethereum.Value.fromUnsignedBigInt(fractionOfCapOi)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  capOi(feed: Address): BigInt {
    let result = super.call("capOi", "capOi(address):(uint256)", [
      ethereum.Value.fromAddress(feed)
    ]);

    return result[0].toBigInt();
  }

  try_capOi(feed: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("capOi", "capOi(address):(uint256)", [
      ethereum.Value.fromAddress(feed)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  circuitBreakerLevel(feed: Address): BigInt {
    let result = super.call(
      "circuitBreakerLevel",
      "circuitBreakerLevel(address):(uint256)",
      [ethereum.Value.fromAddress(feed)]
    );

    return result[0].toBigInt();
  }

  try_circuitBreakerLevel(feed: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "circuitBreakerLevel",
      "circuitBreakerLevel(address):(uint256)",
      [ethereum.Value.fromAddress(feed)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collateral(feed: Address, owner: Address, id: BigInt): BigInt {
    let result = super.call(
      "collateral",
      "collateral(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(feed),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_collateral(
    feed: Address,
    owner: Address,
    id: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collateral",
      "collateral(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(feed),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cost(feed: Address, owner: Address, id: BigInt): BigInt {
    let result = super.call("cost", "cost(address,address,uint256):(uint256)", [
      ethereum.Value.fromAddress(feed),
      ethereum.Value.fromAddress(owner),
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBigInt();
  }

  try_cost(
    feed: Address,
    owner: Address,
    id: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "cost",
      "cost(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(feed),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  data(feed: Address): OverlayV1PositionState__dataResultData_Struct {
    let result = super.call(
      "data",
      "data(address):((uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool))",
      [ethereum.Value.fromAddress(feed)]
    );

    return changetype<OverlayV1PositionState__dataResultData_Struct>(
      result[0].toTuple()
    );
  }

  try_data(
    feed: Address
  ): ethereum.CallResult<OverlayV1PositionState__dataResultData_Struct> {
    let result = super.tryCall(
      "data",
      "data(address):((uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool))",
      [ethereum.Value.fromAddress(feed)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<OverlayV1PositionState__dataResultData_Struct>(
        value[0].toTuple()
      )
    );
  }

  debt(feed: Address, owner: Address, id: BigInt): BigInt {
    let result = super.call("debt", "debt(address,address,uint256):(uint256)", [
      ethereum.Value.fromAddress(feed),
      ethereum.Value.fromAddress(owner),
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBigInt();
  }

  try_debt(
    feed: Address,
    owner: Address,
    id: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "debt",
      "debt(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(feed),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fractionOfCapOi(feed: Address, oi: BigInt): BigInt {
    let result = super.call(
      "fractionOfCapOi",
      "fractionOfCapOi(address,uint256):(uint256)",
      [ethereum.Value.fromAddress(feed), ethereum.Value.fromUnsignedBigInt(oi)]
    );

    return result[0].toBigInt();
  }

  try_fractionOfCapOi(feed: Address, oi: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "fractionOfCapOi",
      "fractionOfCapOi(address,uint256):(uint256)",
      [ethereum.Value.fromAddress(feed), ethereum.Value.fromUnsignedBigInt(oi)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fundingRate(feed: Address): BigInt {
    let result = super.call("fundingRate", "fundingRate(address):(int256)", [
      ethereum.Value.fromAddress(feed)
    ]);

    return result[0].toBigInt();
  }

  try_fundingRate(feed: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("fundingRate", "fundingRate(address):(int256)", [
      ethereum.Value.fromAddress(feed)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidatable(feed: Address, owner: Address, id: BigInt): boolean {
    let result = super.call(
      "liquidatable",
      "liquidatable(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(feed),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBoolean();
  }

  try_liquidatable(
    feed: Address,
    owner: Address,
    id: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "liquidatable",
      "liquidatable(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(feed),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  liquidationFee(feed: Address, owner: Address, id: BigInt): BigInt {
    let result = super.call(
      "liquidationFee",
      "liquidationFee(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(feed),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_liquidationFee(
    feed: Address,
    owner: Address,
    id: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidationFee",
      "liquidationFee(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(feed),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidationPrice(feed: Address, owner: Address, id: BigInt): BigInt {
    let result = super.call(
      "liquidationPrice",
      "liquidationPrice(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(feed),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_liquidationPrice(
    feed: Address,
    owner: Address,
    id: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidationPrice",
      "liquidationPrice(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(feed),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maintenanceMargin(feed: Address, owner: Address, id: BigInt): BigInt {
    let result = super.call(
      "maintenanceMargin",
      "maintenanceMargin(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(feed),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_maintenanceMargin(
    feed: Address,
    owner: Address,
    id: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maintenanceMargin",
      "maintenanceMargin(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(feed),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  marginExcessBeforeLiquidation(
    feed: Address,
    owner: Address,
    id: BigInt
  ): BigInt {
    let result = super.call(
      "marginExcessBeforeLiquidation",
      "marginExcessBeforeLiquidation(address,address,uint256):(int256)",
      [
        ethereum.Value.fromAddress(feed),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_marginExcessBeforeLiquidation(
    feed: Address,
    owner: Address,
    id: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "marginExcessBeforeLiquidation",
      "marginExcessBeforeLiquidation(address,address,uint256):(int256)",
      [
        ethereum.Value.fromAddress(feed),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  market(feed: Address): Address {
    let result = super.call("market", "market(address):(address)", [
      ethereum.Value.fromAddress(feed)
    ]);

    return result[0].toAddress();
  }

  try_market(feed: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("market", "market(address):(address)", [
      ethereum.Value.fromAddress(feed)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  mid(feed: Address): BigInt {
    let result = super.call("mid", "mid(address):(uint256)", [
      ethereum.Value.fromAddress(feed)
    ]);

    return result[0].toBigInt();
  }

  try_mid(feed: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mid", "mid(address):(uint256)", [
      ethereum.Value.fromAddress(feed)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minted(feed: Address): BigInt {
    let result = super.call("minted", "minted(address):(int256)", [
      ethereum.Value.fromAddress(feed)
    ]);

    return result[0].toBigInt();
  }

  try_minted(feed: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minted", "minted(address):(int256)", [
      ethereum.Value.fromAddress(feed)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  notional(feed: Address, owner: Address, id: BigInt): BigInt {
    let result = super.call(
      "notional",
      "notional(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(feed),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_notional(
    feed: Address,
    owner: Address,
    id: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "notional",
      "notional(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(feed),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  oi(feed: Address, owner: Address, id: BigInt): BigInt {
    let result = super.call("oi", "oi(address,address,uint256):(uint256)", [
      ethereum.Value.fromAddress(feed),
      ethereum.Value.fromAddress(owner),
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBigInt();
  }

  try_oi(
    feed: Address,
    owner: Address,
    id: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall("oi", "oi(address,address,uint256):(uint256)", [
      ethereum.Value.fromAddress(feed),
      ethereum.Value.fromAddress(owner),
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ois(feed: Address): OverlayV1PositionState__oisResult {
    let result = super.call("ois", "ois(address):(uint256,uint256)", [
      ethereum.Value.fromAddress(feed)
    ]);

    return new OverlayV1PositionState__oisResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_ois(
    feed: Address
  ): ethereum.CallResult<OverlayV1PositionState__oisResult> {
    let result = super.tryCall("ois", "ois(address):(uint256,uint256)", [
      ethereum.Value.fromAddress(feed)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OverlayV1PositionState__oisResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  position(
    feed: Address,
    owner: Address,
    id: BigInt
  ): OverlayV1PositionState__positionResultPosition_Struct {
    let result = super.call(
      "position",
      "position(address,address,uint256):((uint96,uint96,uint48,bool,bool,uint256))",
      [
        ethereum.Value.fromAddress(feed),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return changetype<OverlayV1PositionState__positionResultPosition_Struct>(
      result[0].toTuple()
    );
  }

  try_position(
    feed: Address,
    owner: Address,
    id: BigInt
  ): ethereum.CallResult<
    OverlayV1PositionState__positionResultPosition_Struct
  > {
    let result = super.tryCall(
      "position",
      "position(address,address,uint256):((uint96,uint96,uint48,bool,bool,uint256))",
      [
        ethereum.Value.fromAddress(feed),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<OverlayV1PositionState__positionResultPosition_Struct>(
        value[0].toTuple()
      )
    );
  }

  prices(feed: Address): OverlayV1PositionState__pricesResult {
    let result = super.call(
      "prices",
      "prices(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(feed)]
    );

    return new OverlayV1PositionState__pricesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_prices(
    feed: Address
  ): ethereum.CallResult<OverlayV1PositionState__pricesResult> {
    let result = super.tryCall(
      "prices",
      "prices(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(feed)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OverlayV1PositionState__pricesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  tradingFee(feed: Address, owner: Address, id: BigInt): BigInt {
    let result = super.call(
      "tradingFee",
      "tradingFee(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(feed),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_tradingFee(
    feed: Address,
    owner: Address,
    id: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tradingFee",
      "tradingFee(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(feed),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  value(feed: Address, owner: Address, id: BigInt): BigInt {
    let result = super.call(
      "value",
      "value(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(feed),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_value(
    feed: Address,
    owner: Address,
    id: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "value",
      "value(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(feed),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  volumeAsk(feed: Address, fractionOfCapOi: BigInt): BigInt {
    let result = super.call(
      "volumeAsk",
      "volumeAsk(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(feed),
        ethereum.Value.fromUnsignedBigInt(fractionOfCapOi)
      ]
    );

    return result[0].toBigInt();
  }

  try_volumeAsk(
    feed: Address,
    fractionOfCapOi: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "volumeAsk",
      "volumeAsk(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(feed),
        ethereum.Value.fromUnsignedBigInt(fractionOfCapOi)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  volumeBid(feed: Address, fractionOfCapOi: BigInt): BigInt {
    let result = super.call(
      "volumeBid",
      "volumeBid(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(feed),
        ethereum.Value.fromUnsignedBigInt(fractionOfCapOi)
      ]
    );

    return result[0].toBigInt();
  }

  try_volumeBid(
    feed: Address,
    fractionOfCapOi: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "volumeBid",
      "volumeBid(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(feed),
        ethereum.Value.fromUnsignedBigInt(fractionOfCapOi)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  volumes(feed: Address): OverlayV1PositionState__volumesResult {
    let result = super.call("volumes", "volumes(address):(uint256,uint256)", [
      ethereum.Value.fromAddress(feed)
    ]);

    return new OverlayV1PositionState__volumesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_volumes(
    feed: Address
  ): ethereum.CallResult<OverlayV1PositionState__volumesResult> {
    let result = super.tryCall(
      "volumes",
      "volumes(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(feed)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OverlayV1PositionState__volumesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }
}
