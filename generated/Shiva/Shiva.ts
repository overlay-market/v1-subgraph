// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class FactoryAdded extends ethereum.Event {
  get params(): FactoryAdded__Params {
    return new FactoryAdded__Params(this);
  }
}

export class FactoryAdded__Params {
  _event: FactoryAdded;

  constructor(event: FactoryAdded) {
    this._event = event;
  }

  get factory(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class FactoryRemoved extends ethereum.Event {
  get params(): FactoryRemoved__Params {
    return new FactoryRemoved__Params(this);
  }
}

export class FactoryRemoved__Params {
  _event: FactoryRemoved;

  constructor(event: FactoryRemoved) {
    this._event = event;
  }

  get factory(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class MarketValidated extends ethereum.Event {
  get params(): MarketValidated__Params {
    return new MarketValidated__Params(this);
  }
}

export class MarketValidated__Params {
  _event: MarketValidated;

  constructor(event: MarketValidated) {
    this._event = event;
  }

  get market(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ShivaBuild extends ethereum.Event {
  get params(): ShivaBuild__Params {
    return new ShivaBuild__Params(this);
  }
}

export class ShivaBuild__Params {
  _event: ShivaBuild;

  constructor(event: ShivaBuild) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get market(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get performer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get positionId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get collateral(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get leverage(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get brokerId(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get isLong(): boolean {
    return this._event.parameters[7].value.toBoolean();
  }
}

export class ShivaEmergencyWithdraw extends ethereum.Event {
  get params(): ShivaEmergencyWithdraw__Params {
    return new ShivaEmergencyWithdraw__Params(this);
  }
}

export class ShivaEmergencyWithdraw__Params {
  _event: ShivaEmergencyWithdraw;

  constructor(event: ShivaEmergencyWithdraw) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get market(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get performer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get positionId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ShivaStake extends ethereum.Event {
  get params(): ShivaStake__Params {
    return new ShivaStake__Params(this);
  }
}

export class ShivaStake__Params {
  _event: ShivaStake;

  constructor(event: ShivaStake) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ShivaUnstake extends ethereum.Event {
  get params(): ShivaUnstake__Params {
    return new ShivaUnstake__Params(this);
  }
}

export class ShivaUnstake__Params {
  _event: ShivaUnstake;

  constructor(event: ShivaUnstake) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ShivaUnwind extends ethereum.Event {
  get params(): ShivaUnwind__Params {
    return new ShivaUnwind__Params(this);
  }
}

export class ShivaUnwind__Params {
  _event: ShivaUnwind;

  constructor(event: ShivaUnwind) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get market(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get performer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get positionId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get fraction(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get brokerId(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Shiva__buildInputParamsStruct extends ethereum.Tuple {
  get ovMarket(): Address {
    return this[0].toAddress();
  }

  get brokerId(): BigInt {
    return this[1].toBigInt();
  }

  get isLong(): boolean {
    return this[2].toBoolean();
  }

  get collateral(): BigInt {
    return this[3].toBigInt();
  }

  get leverage(): BigInt {
    return this[4].toBigInt();
  }

  get priceLimit(): BigInt {
    return this[5].toBigInt();
  }
}

export class Shiva__buildInputOnBehalfOfStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get deadline(): BigInt {
    return this[1].toBigInt();
  }

  get signature(): Bytes {
    return this[2].toBytes();
  }
}

export class Shiva__build1InputParamsStruct extends ethereum.Tuple {
  get ovMarket(): Address {
    return this[0].toAddress();
  }

  get brokerId(): BigInt {
    return this[1].toBigInt();
  }

  get isLong(): boolean {
    return this[2].toBoolean();
  }

  get collateral(): BigInt {
    return this[3].toBigInt();
  }

  get leverage(): BigInt {
    return this[4].toBigInt();
  }

  get priceLimit(): BigInt {
    return this[5].toBigInt();
  }
}

export class Shiva__buildSingleInputParamsStruct extends ethereum.Tuple {
  get ovMarket(): Address {
    return this[0].toAddress();
  }

  get brokerId(): BigInt {
    return this[1].toBigInt();
  }

  get slippage(): i32 {
    return this[2].toI32();
  }

  get collateral(): BigInt {
    return this[3].toBigInt();
  }

  get leverage(): BigInt {
    return this[4].toBigInt();
  }

  get previousPositionId(): BigInt {
    return this[5].toBigInt();
  }
}

export class Shiva__buildSingle1InputParamsStruct extends ethereum.Tuple {
  get ovMarket(): Address {
    return this[0].toAddress();
  }

  get brokerId(): BigInt {
    return this[1].toBigInt();
  }

  get slippage(): i32 {
    return this[2].toI32();
  }

  get collateral(): BigInt {
    return this[3].toBigInt();
  }

  get leverage(): BigInt {
    return this[4].toBigInt();
  }

  get previousPositionId(): BigInt {
    return this[5].toBigInt();
  }
}

export class Shiva__buildSingle1InputOnBehalfOfStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get deadline(): BigInt {
    return this[1].toBigInt();
  }

  get signature(): Bytes {
    return this[2].toBytes();
  }
}

export class Shiva extends ethereum.SmartContract {
  static bind(address: Address): Shiva {
    return new Shiva("Shiva", address);
  }

  BUILD_ON_BEHALF_OF_TYPEHASH(): Bytes {
    let result = super.call(
      "BUILD_ON_BEHALF_OF_TYPEHASH",
      "BUILD_ON_BEHALF_OF_TYPEHASH():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_BUILD_ON_BEHALF_OF_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "BUILD_ON_BEHALF_OF_TYPEHASH",
      "BUILD_ON_BEHALF_OF_TYPEHASH():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  BUILD_SINGLE_ON_BEHALF_OF_TYPEHASH(): Bytes {
    let result = super.call(
      "BUILD_SINGLE_ON_BEHALF_OF_TYPEHASH",
      "BUILD_SINGLE_ON_BEHALF_OF_TYPEHASH():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_BUILD_SINGLE_ON_BEHALF_OF_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "BUILD_SINGLE_ON_BEHALF_OF_TYPEHASH",
      "BUILD_SINGLE_ON_BEHALF_OF_TYPEHASH():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ONE(): BigInt {
    let result = super.call("ONE", "ONE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ONE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("ONE", "ONE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  UNWIND_ON_BEHALF_OF_TYPEHASH(): Bytes {
    let result = super.call(
      "UNWIND_ON_BEHALF_OF_TYPEHASH",
      "UNWIND_ON_BEHALF_OF_TYPEHASH():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_UNWIND_ON_BEHALF_OF_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "UNWIND_ON_BEHALF_OF_TYPEHASH",
      "UNWIND_ON_BEHALF_OF_TYPEHASH():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  authorizedFactories(param0: BigInt): Address {
    let result = super.call(
      "authorizedFactories",
      "authorizedFactories(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toAddress();
  }

  try_authorizedFactories(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "authorizedFactories",
      "authorizedFactories(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  build(
    params: Shiva__buildInputParamsStruct,
    onBehalfOf: Shiva__buildInputOnBehalfOfStruct,
  ): BigInt {
    let result = super.call(
      "build",
      "build((address,uint32,bool,uint256,uint256,uint256),(address,uint48,bytes)):(uint256)",
      [ethereum.Value.fromTuple(params), ethereum.Value.fromTuple(onBehalfOf)],
    );

    return result[0].toBigInt();
  }

  try_build(
    params: Shiva__buildInputParamsStruct,
    onBehalfOf: Shiva__buildInputOnBehalfOfStruct,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "build",
      "build((address,uint32,bool,uint256,uint256,uint256),(address,uint48,bytes)):(uint256)",
      [ethereum.Value.fromTuple(params), ethereum.Value.fromTuple(onBehalfOf)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  build1(params: Shiva__build1InputParamsStruct): BigInt {
    let result = super.call(
      "build",
      "build((address,uint32,bool,uint256,uint256,uint256)):(uint256)",
      [ethereum.Value.fromTuple(params)],
    );

    return result[0].toBigInt();
  }

  try_build1(
    params: Shiva__build1InputParamsStruct,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "build",
      "build((address,uint32,bool,uint256,uint256,uint256)):(uint256)",
      [ethereum.Value.fromTuple(params)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  buildSingle(params: Shiva__buildSingleInputParamsStruct): BigInt {
    let result = super.call(
      "buildSingle",
      "buildSingle((address,uint32,uint16,uint256,uint256,uint256)):(uint256)",
      [ethereum.Value.fromTuple(params)],
    );

    return result[0].toBigInt();
  }

  try_buildSingle(
    params: Shiva__buildSingleInputParamsStruct,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "buildSingle",
      "buildSingle((address,uint32,uint16,uint256,uint256,uint256)):(uint256)",
      [ethereum.Value.fromTuple(params)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  buildSingle1(
    params: Shiva__buildSingle1InputParamsStruct,
    onBehalfOf: Shiva__buildSingle1InputOnBehalfOfStruct,
  ): BigInt {
    let result = super.call(
      "buildSingle",
      "buildSingle((address,uint32,uint16,uint256,uint256,uint256),(address,uint48,bytes)):(uint256)",
      [ethereum.Value.fromTuple(params), ethereum.Value.fromTuple(onBehalfOf)],
    );

    return result[0].toBigInt();
  }

  try_buildSingle1(
    params: Shiva__buildSingle1InputParamsStruct,
    onBehalfOf: Shiva__buildSingle1InputOnBehalfOfStruct,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "buildSingle",
      "buildSingle((address,uint32,uint16,uint256,uint256,uint256),(address,uint48,bytes)):(uint256)",
      [ethereum.Value.fromTuple(params), ethereum.Value.fromTuple(onBehalfOf)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDigest(structHash: Bytes): Bytes {
    let result = super.call("getDigest", "getDigest(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(structHash),
    ]);

    return result[0].toBytes();
  }

  try_getDigest(structHash: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall("getDigest", "getDigest(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(structHash),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  marketAllowance(param0: Address): boolean {
    let result = super.call(
      "marketAllowance",
      "marketAllowance(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBoolean();
  }

  try_marketAllowance(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "marketAllowance",
      "marketAllowance(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  nonces(param0: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_nonces(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ovState(): Address {
    let result = super.call("ovState", "ovState():(address)", []);

    return result[0].toAddress();
  }

  try_ovState(): ethereum.CallResult<Address> {
    let result = super.tryCall("ovState", "ovState():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ovToken(): Address {
    let result = super.call("ovToken", "ovToken():(address)", []);

    return result[0].toAddress();
  }

  try_ovToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("ovToken", "ovToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  positionOwners(param0: Address, param1: BigInt): Address {
    let result = super.call(
      "positionOwners",
      "positionOwners(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toAddress();
  }

  try_positionOwners(
    param0: Address,
    param1: BigInt,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "positionOwners",
      "positionOwners(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  rewardVault(): Address {
    let result = super.call("rewardVault", "rewardVault():(address)", []);

    return result[0].toAddress();
  }

  try_rewardVault(): ethereum.CallResult<Address> {
    let result = super.tryCall("rewardVault", "rewardVault():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakingToken(): Address {
    let result = super.call("stakingToken", "stakingToken():(address)", []);

    return result[0].toAddress();
  }

  try_stakingToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("stakingToken", "stakingToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  validMarkets(param0: Address): boolean {
    let result = super.call("validMarkets", "validMarkets(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBoolean();
  }

  try_validMarkets(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("validMarkets", "validMarkets(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddFactoryCall extends ethereum.Call {
  get inputs(): AddFactoryCall__Inputs {
    return new AddFactoryCall__Inputs(this);
  }

  get outputs(): AddFactoryCall__Outputs {
    return new AddFactoryCall__Outputs(this);
  }
}

export class AddFactoryCall__Inputs {
  _call: AddFactoryCall;

  constructor(call: AddFactoryCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddFactoryCall__Outputs {
  _call: AddFactoryCall;

  constructor(call: AddFactoryCall) {
    this._call = call;
  }
}

export class BuildCall extends ethereum.Call {
  get inputs(): BuildCall__Inputs {
    return new BuildCall__Inputs(this);
  }

  get outputs(): BuildCall__Outputs {
    return new BuildCall__Outputs(this);
  }
}

export class BuildCall__Inputs {
  _call: BuildCall;

  constructor(call: BuildCall) {
    this._call = call;
  }

  get params(): BuildCallParamsStruct {
    return changetype<BuildCallParamsStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }

  get onBehalfOf(): BuildCallOnBehalfOfStruct {
    return changetype<BuildCallOnBehalfOfStruct>(
      this._call.inputValues[1].value.toTuple(),
    );
  }
}

export class BuildCall__Outputs {
  _call: BuildCall;

  constructor(call: BuildCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BuildCallParamsStruct extends ethereum.Tuple {
  get ovMarket(): Address {
    return this[0].toAddress();
  }

  get brokerId(): BigInt {
    return this[1].toBigInt();
  }

  get isLong(): boolean {
    return this[2].toBoolean();
  }

  get collateral(): BigInt {
    return this[3].toBigInt();
  }

  get leverage(): BigInt {
    return this[4].toBigInt();
  }

  get priceLimit(): BigInt {
    return this[5].toBigInt();
  }
}

export class BuildCallOnBehalfOfStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get deadline(): BigInt {
    return this[1].toBigInt();
  }

  get signature(): Bytes {
    return this[2].toBytes();
  }
}

export class Build1Call extends ethereum.Call {
  get inputs(): Build1Call__Inputs {
    return new Build1Call__Inputs(this);
  }

  get outputs(): Build1Call__Outputs {
    return new Build1Call__Outputs(this);
  }
}

export class Build1Call__Inputs {
  _call: Build1Call;

  constructor(call: Build1Call) {
    this._call = call;
  }

  get params(): Build1CallParamsStruct {
    return changetype<Build1CallParamsStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class Build1Call__Outputs {
  _call: Build1Call;

  constructor(call: Build1Call) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class Build1CallParamsStruct extends ethereum.Tuple {
  get ovMarket(): Address {
    return this[0].toAddress();
  }

  get brokerId(): BigInt {
    return this[1].toBigInt();
  }

  get isLong(): boolean {
    return this[2].toBoolean();
  }

  get collateral(): BigInt {
    return this[3].toBigInt();
  }

  get leverage(): BigInt {
    return this[4].toBigInt();
  }

  get priceLimit(): BigInt {
    return this[5].toBigInt();
  }
}

export class BuildSingleCall extends ethereum.Call {
  get inputs(): BuildSingleCall__Inputs {
    return new BuildSingleCall__Inputs(this);
  }

  get outputs(): BuildSingleCall__Outputs {
    return new BuildSingleCall__Outputs(this);
  }
}

export class BuildSingleCall__Inputs {
  _call: BuildSingleCall;

  constructor(call: BuildSingleCall) {
    this._call = call;
  }

  get params(): BuildSingleCallParamsStruct {
    return changetype<BuildSingleCallParamsStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class BuildSingleCall__Outputs {
  _call: BuildSingleCall;

  constructor(call: BuildSingleCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BuildSingleCallParamsStruct extends ethereum.Tuple {
  get ovMarket(): Address {
    return this[0].toAddress();
  }

  get brokerId(): BigInt {
    return this[1].toBigInt();
  }

  get slippage(): i32 {
    return this[2].toI32();
  }

  get collateral(): BigInt {
    return this[3].toBigInt();
  }

  get leverage(): BigInt {
    return this[4].toBigInt();
  }

  get previousPositionId(): BigInt {
    return this[5].toBigInt();
  }
}

export class BuildSingle1Call extends ethereum.Call {
  get inputs(): BuildSingle1Call__Inputs {
    return new BuildSingle1Call__Inputs(this);
  }

  get outputs(): BuildSingle1Call__Outputs {
    return new BuildSingle1Call__Outputs(this);
  }
}

export class BuildSingle1Call__Inputs {
  _call: BuildSingle1Call;

  constructor(call: BuildSingle1Call) {
    this._call = call;
  }

  get params(): BuildSingle1CallParamsStruct {
    return changetype<BuildSingle1CallParamsStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }

  get onBehalfOf(): BuildSingle1CallOnBehalfOfStruct {
    return changetype<BuildSingle1CallOnBehalfOfStruct>(
      this._call.inputValues[1].value.toTuple(),
    );
  }
}

export class BuildSingle1Call__Outputs {
  _call: BuildSingle1Call;

  constructor(call: BuildSingle1Call) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BuildSingle1CallParamsStruct extends ethereum.Tuple {
  get ovMarket(): Address {
    return this[0].toAddress();
  }

  get brokerId(): BigInt {
    return this[1].toBigInt();
  }

  get slippage(): i32 {
    return this[2].toI32();
  }

  get collateral(): BigInt {
    return this[3].toBigInt();
  }

  get leverage(): BigInt {
    return this[4].toBigInt();
  }

  get previousPositionId(): BigInt {
    return this[5].toBigInt();
  }
}

export class BuildSingle1CallOnBehalfOfStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get deadline(): BigInt {
    return this[1].toBigInt();
  }

  get signature(): Bytes {
    return this[2].toBytes();
  }
}

export class EmergencyWithdrawCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawCall__Inputs {
    return new EmergencyWithdrawCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawCall__Outputs {
    return new EmergencyWithdrawCall__Outputs(this);
  }
}

export class EmergencyWithdrawCall__Inputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }

  get market(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get positionId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class EmergencyWithdrawCall__Outputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _ovToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _ovState(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _vaultFactory(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class OverlayMarketLiquidateCallbackCall extends ethereum.Call {
  get inputs(): OverlayMarketLiquidateCallbackCall__Inputs {
    return new OverlayMarketLiquidateCallbackCall__Inputs(this);
  }

  get outputs(): OverlayMarketLiquidateCallbackCall__Outputs {
    return new OverlayMarketLiquidateCallbackCall__Outputs(this);
  }
}

export class OverlayMarketLiquidateCallbackCall__Inputs {
  _call: OverlayMarketLiquidateCallbackCall;

  constructor(call: OverlayMarketLiquidateCallbackCall) {
    this._call = call;
  }

  get positionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class OverlayMarketLiquidateCallbackCall__Outputs {
  _call: OverlayMarketLiquidateCallbackCall;

  constructor(call: OverlayMarketLiquidateCallbackCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RemoveFactoryCall extends ethereum.Call {
  get inputs(): RemoveFactoryCall__Inputs {
    return new RemoveFactoryCall__Inputs(this);
  }

  get outputs(): RemoveFactoryCall__Outputs {
    return new RemoveFactoryCall__Outputs(this);
  }
}

export class RemoveFactoryCall__Inputs {
  _call: RemoveFactoryCall;

  constructor(call: RemoveFactoryCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveFactoryCall__Outputs {
  _call: RemoveFactoryCall;

  constructor(call: RemoveFactoryCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnwindCall extends ethereum.Call {
  get inputs(): UnwindCall__Inputs {
    return new UnwindCall__Inputs(this);
  }

  get outputs(): UnwindCall__Outputs {
    return new UnwindCall__Outputs(this);
  }
}

export class UnwindCall__Inputs {
  _call: UnwindCall;

  constructor(call: UnwindCall) {
    this._call = call;
  }

  get params(): UnwindCallParamsStruct {
    return changetype<UnwindCallParamsStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class UnwindCall__Outputs {
  _call: UnwindCall;

  constructor(call: UnwindCall) {
    this._call = call;
  }
}

export class UnwindCallParamsStruct extends ethereum.Tuple {
  get ovMarket(): Address {
    return this[0].toAddress();
  }

  get brokerId(): BigInt {
    return this[1].toBigInt();
  }

  get positionId(): BigInt {
    return this[2].toBigInt();
  }

  get fraction(): BigInt {
    return this[3].toBigInt();
  }

  get priceLimit(): BigInt {
    return this[4].toBigInt();
  }
}

export class Unwind1Call extends ethereum.Call {
  get inputs(): Unwind1Call__Inputs {
    return new Unwind1Call__Inputs(this);
  }

  get outputs(): Unwind1Call__Outputs {
    return new Unwind1Call__Outputs(this);
  }
}

export class Unwind1Call__Inputs {
  _call: Unwind1Call;

  constructor(call: Unwind1Call) {
    this._call = call;
  }

  get params(): Unwind1CallParamsStruct {
    return changetype<Unwind1CallParamsStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }

  get onBehalfOf(): Unwind1CallOnBehalfOfStruct {
    return changetype<Unwind1CallOnBehalfOfStruct>(
      this._call.inputValues[1].value.toTuple(),
    );
  }
}

export class Unwind1Call__Outputs {
  _call: Unwind1Call;

  constructor(call: Unwind1Call) {
    this._call = call;
  }
}

export class Unwind1CallParamsStruct extends ethereum.Tuple {
  get ovMarket(): Address {
    return this[0].toAddress();
  }

  get brokerId(): BigInt {
    return this[1].toBigInt();
  }

  get positionId(): BigInt {
    return this[2].toBigInt();
  }

  get fraction(): BigInt {
    return this[3].toBigInt();
  }

  get priceLimit(): BigInt {
    return this[4].toBigInt();
  }
}

export class Unwind1CallOnBehalfOfStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get deadline(): BigInt {
    return this[1].toBigInt();
  }

  get signature(): Bytes {
    return this[2].toBytes();
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
