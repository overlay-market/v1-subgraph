// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class FeedDeployed extends ethereum.Event {
  get params(): FeedDeployed__Params {
    return new FeedDeployed__Params(this);
  }
}

export class FeedDeployed__Params {
  _event: FeedDeployed;

  constructor(event: FeedDeployed) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get feed(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OverlayV1ChainlinkFeedFactory extends ethereum.SmartContract {
  static bind(address: Address): OverlayV1ChainlinkFeedFactory {
    return new OverlayV1ChainlinkFeedFactory(
      "OverlayV1ChainlinkFeedFactory",
      address,
    );
  }

  OV(): Address {
    let result = super.call("OV", "OV():(address)", []);

    return result[0].toAddress();
  }

  try_OV(): ethereum.CallResult<Address> {
    let result = super.tryCall("OV", "OV():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deployFeed(_aggregator: Address, _heartbeat: BigInt): Address {
    let result = super.call(
      "deployFeed",
      "deployFeed(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(_aggregator),
        ethereum.Value.fromUnsignedBigInt(_heartbeat),
      ],
    );

    return result[0].toAddress();
  }

  try_deployFeed(
    _aggregator: Address,
    _heartbeat: BigInt,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployFeed",
      "deployFeed(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(_aggregator),
        ethereum.Value.fromUnsignedBigInt(_heartbeat),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getFeed(param0: Address): Address {
    let result = super.call("getFeed", "getFeed(address):(address)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toAddress();
  }

  try_getFeed(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("getFeed", "getFeed(address):(address)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isFeed(param0: Address): boolean {
    let result = super.call("isFeed", "isFeed(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBoolean();
  }

  try_isFeed(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isFeed", "isFeed(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  macroWindow(): BigInt {
    let result = super.call("macroWindow", "macroWindow():(uint256)", []);

    return result[0].toBigInt();
  }

  try_macroWindow(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("macroWindow", "macroWindow():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  microWindow(): BigInt {
    let result = super.call("microWindow", "microWindow():(uint256)", []);

    return result[0].toBigInt();
  }

  try_microWindow(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("microWindow", "microWindow():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _ov(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _microWindow(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _macroWindow(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DeployFeedCall extends ethereum.Call {
  get inputs(): DeployFeedCall__Inputs {
    return new DeployFeedCall__Inputs(this);
  }

  get outputs(): DeployFeedCall__Outputs {
    return new DeployFeedCall__Outputs(this);
  }
}

export class DeployFeedCall__Inputs {
  _call: DeployFeedCall;

  constructor(call: DeployFeedCall) {
    this._call = call;
  }

  get _aggregator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _heartbeat(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DeployFeedCall__Outputs {
  _call: DeployFeedCall;

  constructor(call: DeployFeedCall) {
    this._call = call;
  }

  get _feed(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
