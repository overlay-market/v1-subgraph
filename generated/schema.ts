// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class Analytics extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Analytics entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Analytics must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Analytics", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Analytics | null {
    return changetype<Analytics | null>(
      store.get_in_block("Analytics", id.toHexString()),
    );
  }

  static load(id: Bytes): Analytics | null {
    return changetype<Analytics | null>(
      store.get("Analytics", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get totalUsers(): BigInt {
    let value = this.get("totalUsers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalUsers(value: BigInt) {
    this.set("totalUsers", Value.fromBigInt(value));
  }

  get totalTransactions(): BigInt {
    let value = this.get("totalTransactions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTransactions(value: BigInt) {
    this.set("totalTransactions", Value.fromBigInt(value));
  }

  get totalTokensLocked(): BigInt {
    let value = this.get("totalTokensLocked");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTokensLocked(value: BigInt) {
    this.set("totalTokensLocked", Value.fromBigInt(value));
  }

  get totalVolumeBuilds(): BigInt {
    let value = this.get("totalVolumeBuilds");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalVolumeBuilds(value: BigInt) {
    this.set("totalVolumeBuilds", Value.fromBigInt(value));
  }

  get totalVolumeUnwinds(): BigInt {
    let value = this.get("totalVolumeUnwinds");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalVolumeUnwinds(value: BigInt) {
    this.set("totalVolumeUnwinds", Value.fromBigInt(value));
  }

  get totalVolumeLiquidations(): BigInt {
    let value = this.get("totalVolumeLiquidations");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalVolumeLiquidations(value: BigInt) {
    this.set("totalVolumeLiquidations", Value.fromBigInt(value));
  }

  get totalVolume(): BigInt {
    let value = this.get("totalVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalVolume(value: BigInt) {
    this.set("totalVolume", Value.fromBigInt(value));
  }
}

export class AnalyticsHourData extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AnalyticsHourData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type AnalyticsHourData must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("AnalyticsHourData", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): AnalyticsHourData | null {
    return changetype<AnalyticsHourData | null>(
      store.get_in_block("AnalyticsHourData", id.toHexString()),
    );
  }

  static load(id: Bytes): AnalyticsHourData | null {
    return changetype<AnalyticsHourData | null>(
      store.get("AnalyticsHourData", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get periodStartUnix(): i32 {
    let value = this.get("periodStartUnix");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set periodStartUnix(value: i32) {
    this.set("periodStartUnix", Value.fromI32(value));
  }

  get totalUsers(): BigInt {
    let value = this.get("totalUsers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalUsers(value: BigInt) {
    this.set("totalUsers", Value.fromBigInt(value));
  }

  get totalTransactions(): BigInt {
    let value = this.get("totalTransactions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTransactions(value: BigInt) {
    this.set("totalTransactions", Value.fromBigInt(value));
  }

  get totalTokensLocked(): BigInt {
    let value = this.get("totalTokensLocked");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTokensLocked(value: BigInt) {
    this.set("totalTokensLocked", Value.fromBigInt(value));
  }

  get totalVolumeBuilds(): BigInt {
    let value = this.get("totalVolumeBuilds");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalVolumeBuilds(value: BigInt) {
    this.set("totalVolumeBuilds", Value.fromBigInt(value));
  }

  get totalVolumeUnwinds(): BigInt {
    let value = this.get("totalVolumeUnwinds");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalVolumeUnwinds(value: BigInt) {
    this.set("totalVolumeUnwinds", Value.fromBigInt(value));
  }

  get totalVolumeLiquidations(): BigInt {
    let value = this.get("totalVolumeLiquidations");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalVolumeLiquidations(value: BigInt) {
    this.set("totalVolumeLiquidations", Value.fromBigInt(value));
  }

  get totalVolume(): BigInt {
    let value = this.get("totalVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalVolume(value: BigInt) {
    this.set("totalVolume", Value.fromBigInt(value));
  }
}

export class Factory extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Factory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Factory must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Factory", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Factory | null {
    return changetype<Factory | null>(
      store.get_in_block("Factory", id.toHexString()),
    );
  }

  static load(id: Bytes): Factory | null {
    return changetype<Factory | null>(store.get("Factory", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get marketCount(): BigInt {
    let value = this.get("marketCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set marketCount(value: BigInt) {
    this.set("marketCount", Value.fromBigInt(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get totalVolumeOVL(): BigDecimal {
    let value = this.get("totalVolumeOVL");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalVolumeOVL(value: BigDecimal) {
    this.set("totalVolumeOVL", Value.fromBigDecimal(value));
  }

  get totalFeesOVL(): BigDecimal {
    let value = this.get("totalFeesOVL");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalFeesOVL(value: BigDecimal) {
    this.set("totalFeesOVL", Value.fromBigDecimal(value));
  }

  get totalValueLockedOVL(): BigDecimal {
    let value = this.get("totalValueLockedOVL");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalValueLockedOVL(value: BigDecimal) {
    this.set("totalValueLockedOVL", Value.fromBigDecimal(value));
  }

  get feeRecipient(): string {
    let value = this.get("feeRecipient");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set feeRecipient(value: string) {
    this.set("feeRecipient", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get markets(): MarketLoader {
    return new MarketLoader(
      "Factory",
      this.get("id")!.toBytes().toHexString(),
      "markets",
    );
  }
}

export class Market extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Market entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Market must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Market", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Market | null {
    return changetype<Market | null>(
      store.get_in_block("Market", id.toHexString()),
    );
  }

  static load(id: Bytes): Market | null {
    return changetype<Market | null>(store.get("Market", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get feedAddress(): string {
    let value = this.get("feedAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set feedAddress(value: string) {
    this.set("feedAddress", Value.fromString(value));
  }

  get factory(): Bytes {
    let value = this.get("factory");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set factory(value: Bytes) {
    this.set("factory", Value.fromBytes(value));
  }

  get createdAtTimestamp(): BigInt {
    let value = this.get("createdAtTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAtTimestamp(value: BigInt) {
    this.set("createdAtTimestamp", Value.fromBigInt(value));
  }

  get createdAtBlockNumber(): BigInt {
    let value = this.get("createdAtBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAtBlockNumber(value: BigInt) {
    this.set("createdAtBlockNumber", Value.fromBigInt(value));
  }

  get k(): BigInt {
    let value = this.get("k");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set k(value: BigInt) {
    this.set("k", Value.fromBigInt(value));
  }

  get lmbda(): BigInt {
    let value = this.get("lmbda");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lmbda(value: BigInt) {
    this.set("lmbda", Value.fromBigInt(value));
  }

  get delta(): BigInt {
    let value = this.get("delta");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set delta(value: BigInt) {
    this.set("delta", Value.fromBigInt(value));
  }

  get capPayoff(): BigInt {
    let value = this.get("capPayoff");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set capPayoff(value: BigInt) {
    this.set("capPayoff", Value.fromBigInt(value));
  }

  get capNotional(): BigInt {
    let value = this.get("capNotional");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set capNotional(value: BigInt) {
    this.set("capNotional", Value.fromBigInt(value));
  }

  get capLeverage(): BigInt {
    let value = this.get("capLeverage");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set capLeverage(value: BigInt) {
    this.set("capLeverage", Value.fromBigInt(value));
  }

  get circuitBreakerWindow(): BigInt {
    let value = this.get("circuitBreakerWindow");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set circuitBreakerWindow(value: BigInt) {
    this.set("circuitBreakerWindow", Value.fromBigInt(value));
  }

  get circuitBreakerMintTarget(): BigInt {
    let value = this.get("circuitBreakerMintTarget");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set circuitBreakerMintTarget(value: BigInt) {
    this.set("circuitBreakerMintTarget", Value.fromBigInt(value));
  }

  get maintenanceMarginFraction(): BigInt {
    let value = this.get("maintenanceMarginFraction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set maintenanceMarginFraction(value: BigInt) {
    this.set("maintenanceMarginFraction", Value.fromBigInt(value));
  }

  get maintenanceMarginBurnRate(): BigInt {
    let value = this.get("maintenanceMarginBurnRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set maintenanceMarginBurnRate(value: BigInt) {
    this.set("maintenanceMarginBurnRate", Value.fromBigInt(value));
  }

  get liquidationFeeRate(): BigInt {
    let value = this.get("liquidationFeeRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set liquidationFeeRate(value: BigInt) {
    this.set("liquidationFeeRate", Value.fromBigInt(value));
  }

  get tradingFeeRate(): BigInt {
    let value = this.get("tradingFeeRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tradingFeeRate(value: BigInt) {
    this.set("tradingFeeRate", Value.fromBigInt(value));
  }

  get minCollateral(): BigInt {
    let value = this.get("minCollateral");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set minCollateral(value: BigInt) {
    this.set("minCollateral", Value.fromBigInt(value));
  }

  get priceDriftUpperLimit(): BigInt {
    let value = this.get("priceDriftUpperLimit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set priceDriftUpperLimit(value: BigInt) {
    this.set("priceDriftUpperLimit", Value.fromBigInt(value));
  }

  get averageBlockTime(): BigInt {
    let value = this.get("averageBlockTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set averageBlockTime(value: BigInt) {
    this.set("averageBlockTime", Value.fromBigInt(value));
  }

  get oiLong(): BigInt {
    let value = this.get("oiLong");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set oiLong(value: BigInt) {
    this.set("oiLong", Value.fromBigInt(value));
  }

  get oiShort(): BigInt {
    let value = this.get("oiShort");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set oiShort(value: BigInt) {
    this.set("oiShort", Value.fromBigInt(value));
  }

  get oiLongShares(): BigInt {
    let value = this.get("oiLongShares");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set oiLongShares(value: BigInt) {
    this.set("oiLongShares", Value.fromBigInt(value));
  }

  get oiShortShares(): BigInt {
    let value = this.get("oiShortShares");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set oiShortShares(value: BigInt) {
    this.set("oiShortShares", Value.fromBigInt(value));
  }

  get isShutdown(): boolean {
    let value = this.get("isShutdown");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isShutdown(value: boolean) {
    this.set("isShutdown", Value.fromBoolean(value));
  }

  get numberOfBuilds(): BigInt {
    let value = this.get("numberOfBuilds");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set numberOfBuilds(value: BigInt) {
    this.set("numberOfBuilds", Value.fromBigInt(value));
  }

  get totalBuildFees(): BigInt {
    let value = this.get("totalBuildFees");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalBuildFees(value: BigInt) {
    this.set("totalBuildFees", Value.fromBigInt(value));
  }

  get numberOfUnwinds(): BigInt {
    let value = this.get("numberOfUnwinds");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set numberOfUnwinds(value: BigInt) {
    this.set("numberOfUnwinds", Value.fromBigInt(value));
  }

  get totalUnwindFees(): BigInt {
    let value = this.get("totalUnwindFees");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalUnwindFees(value: BigInt) {
    this.set("totalUnwindFees", Value.fromBigInt(value));
  }

  get numberOfLiquidates(): BigInt {
    let value = this.get("numberOfLiquidates");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set numberOfLiquidates(value: BigInt) {
    this.set("numberOfLiquidates", Value.fromBigInt(value));
  }

  get totalLiquidateFees(): BigInt {
    let value = this.get("totalLiquidateFees");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalLiquidateFees(value: BigInt) {
    this.set("totalLiquidateFees", Value.fromBigInt(value));
  }

  get totalFees(): BigInt {
    let value = this.get("totalFees");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalFees(value: BigInt) {
    this.set("totalFees", Value.fromBigInt(value));
  }

  get totalVolume(): BigInt {
    let value = this.get("totalVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalVolume(value: BigInt) {
    this.set("totalVolume", Value.fromBigInt(value));
  }

  get totalMint(): BigInt {
    let value = this.get("totalMint");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalMint(value: BigInt) {
    this.set("totalMint", Value.fromBigInt(value));
  }

  get dpUpperLimit(): BigInt {
    let value = this.get("dpUpperLimit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set dpUpperLimit(value: BigInt) {
    this.set("dpUpperLimit", Value.fromBigInt(value));
  }

  get marketHourData(): MarketHourDataLoader {
    return new MarketHourDataLoader(
      "Market",
      this.get("id")!.toBytes().toHexString(),
      "marketHourData",
    );
  }

  get positions(): PositionLoader {
    return new PositionLoader(
      "Market",
      this.get("id")!.toBytes().toHexString(),
      "positions",
    );
  }

  get marketState(): MarketStateLoader {
    return new MarketStateLoader(
      "Market",
      this.get("id")!.toBytes().toHexString(),
      "marketState",
    );
  }
}

export class MarketState extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MarketState entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type MarketState must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("MarketState", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): MarketState | null {
    return changetype<MarketState | null>(
      store.get_in_block("MarketState", id.toHexString()),
    );
  }

  static load(id: Bytes): MarketState | null {
    return changetype<MarketState | null>(
      store.get("MarketState", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get market(): Bytes {
    let value = this.get("market");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set market(value: Bytes) {
    this.set("market", Value.fromBytes(value));
  }

  get bid(): BigInt {
    let value = this.get("bid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set bid(value: BigInt) {
    this.set("bid", Value.fromBigInt(value));
  }

  get ask(): BigInt {
    let value = this.get("ask");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set ask(value: BigInt) {
    this.set("ask", Value.fromBigInt(value));
  }

  get mid(): BigInt {
    let value = this.get("mid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set mid(value: BigInt) {
    this.set("mid", Value.fromBigInt(value));
  }

  get volumeBid(): BigInt {
    let value = this.get("volumeBid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set volumeBid(value: BigInt) {
    this.set("volumeBid", Value.fromBigInt(value));
  }

  get volumeAsk(): BigInt {
    let value = this.get("volumeAsk");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set volumeAsk(value: BigInt) {
    this.set("volumeAsk", Value.fromBigInt(value));
  }

  get oiLong(): BigInt {
    let value = this.get("oiLong");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set oiLong(value: BigInt) {
    this.set("oiLong", Value.fromBigInt(value));
  }

  get oiShort(): BigInt {
    let value = this.get("oiShort");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set oiShort(value: BigInt) {
    this.set("oiShort", Value.fromBigInt(value));
  }

  get capOi(): BigInt {
    let value = this.get("capOi");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set capOi(value: BigInt) {
    this.set("capOi", Value.fromBigInt(value));
  }

  get circuitBreakerLevel(): BigInt {
    let value = this.get("circuitBreakerLevel");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set circuitBreakerLevel(value: BigInt) {
    this.set("circuitBreakerLevel", Value.fromBigInt(value));
  }

  get fundingRate(): BigInt {
    let value = this.get("fundingRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set fundingRate(value: BigInt) {
    this.set("fundingRate", Value.fromBigInt(value));
  }
}

export class Position extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Position entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Position must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Position", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Position | null {
    return changetype<Position | null>(
      store.get_in_block("Position", id.toHexString()),
    );
  }

  static load(id: Bytes): Position | null {
    return changetype<Position | null>(store.get("Position", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get positionId(): string {
    let value = this.get("positionId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set positionId(value: string) {
    this.set("positionId", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get market(): Bytes {
    let value = this.get("market");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set market(value: Bytes) {
    this.set("market", Value.fromBytes(value));
  }

  get initialOi(): BigInt {
    let value = this.get("initialOi");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set initialOi(value: BigInt) {
    this.set("initialOi", Value.fromBigInt(value));
  }

  get initialDebt(): BigInt {
    let value = this.get("initialDebt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set initialDebt(value: BigInt) {
    this.set("initialDebt", Value.fromBigInt(value));
  }

  get initialCollateral(): BigInt {
    let value = this.get("initialCollateral");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set initialCollateral(value: BigInt) {
    this.set("initialCollateral", Value.fromBigInt(value));
  }

  get initialNotional(): BigInt {
    let value = this.get("initialNotional");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set initialNotional(value: BigInt) {
    this.set("initialNotional", Value.fromBigInt(value));
  }

  get leverage(): BigDecimal {
    let value = this.get("leverage");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set leverage(value: BigDecimal) {
    this.set("leverage", Value.fromBigDecimal(value));
  }

  get fractionUnwound(): BigInt {
    let value = this.get("fractionUnwound");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set fractionUnwound(value: BigInt) {
    this.set("fractionUnwound", Value.fromBigInt(value));
  }

  get isLong(): boolean {
    let value = this.get("isLong");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isLong(value: boolean) {
    this.set("isLong", Value.fromBoolean(value));
  }

  get entryPrice(): BigInt {
    let value = this.get("entryPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set entryPrice(value: BigInt) {
    this.set("entryPrice", Value.fromBigInt(value));
  }

  get isLiquidated(): boolean {
    let value = this.get("isLiquidated");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isLiquidated(value: boolean) {
    this.set("isLiquidated", Value.fromBoolean(value));
  }

  get currentOi(): BigInt {
    let value = this.get("currentOi");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentOi(value: BigInt) {
    this.set("currentOi", Value.fromBigInt(value));
  }

  get currentDebt(): BigInt {
    let value = this.get("currentDebt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentDebt(value: BigInt) {
    this.set("currentDebt", Value.fromBigInt(value));
  }

  get mint(): BigInt {
    let value = this.get("mint");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set mint(value: BigInt) {
    this.set("mint", Value.fromBigInt(value));
  }

  get createdAtTimestamp(): BigInt {
    let value = this.get("createdAtTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAtTimestamp(value: BigInt) {
    this.set("createdAtTimestamp", Value.fromBigInt(value));
  }

  get createdAtBlockNumber(): BigInt {
    let value = this.get("createdAtBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAtBlockNumber(value: BigInt) {
    this.set("createdAtBlockNumber", Value.fromBigInt(value));
  }

  get numberOfUniwnds(): BigInt {
    let value = this.get("numberOfUniwnds");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set numberOfUniwnds(value: BigInt) {
    this.set("numberOfUniwnds", Value.fromBigInt(value));
  }

  get builds(): BuildLoader {
    return new BuildLoader(
      "Position",
      this.get("id")!.toBytes().toHexString(),
      "builds",
    );
  }

  get liquidates(): LiquidateLoader {
    return new LiquidateLoader(
      "Position",
      this.get("id")!.toBytes().toHexString(),
      "liquidates",
    );
  }

  get unwinds(): UnwindLoader {
    return new UnwindLoader(
      "Position",
      this.get("id")!.toBytes().toHexString(),
      "unwinds",
    );
  }
}

export class Transaction extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Transaction must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Transaction", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Transaction | null {
    return changetype<Transaction | null>(
      store.get_in_block("Transaction", id.toHexString()),
    );
  }

  static load(id: Bytes): Transaction | null {
    return changetype<Transaction | null>(
      store.get("Transaction", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get gasLimit(): BigInt {
    let value = this.get("gasLimit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set gasLimit(value: BigInt) {
    this.set("gasLimit", Value.fromBigInt(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get builds(): BuildLoader {
    return new BuildLoader(
      "Transaction",
      this.get("id")!.toBytes().toHexString(),
      "builds",
    );
  }

  get unwinds(): UnwindLoader {
    return new UnwindLoader(
      "Transaction",
      this.get("id")!.toBytes().toHexString(),
      "unwinds",
    );
  }

  get liquidates(): LiquidateLoader {
    return new LiquidateLoader(
      "Transaction",
      this.get("id")!.toBytes().toHexString(),
      "liquidates",
    );
  }

  get tokenTransfers(): TokenTransferLoader {
    return new TokenTransferLoader(
      "Transaction",
      this.get("id")!.toBytes().toHexString(),
      "tokenTransfers",
    );
  }
}

export class Build extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Build entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Build must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Build", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Build | null {
    return changetype<Build | null>(
      store.get_in_block("Build", id.toHexString()),
    );
  }

  static load(id: Bytes): Build | null {
    return changetype<Build | null>(store.get("Build", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get position(): Bytes {
    let value = this.get("position");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set position(value: Bytes) {
    this.set("position", Value.fromBytes(value));
  }

  get currentOi(): BigInt {
    let value = this.get("currentOi");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentOi(value: BigInt) {
    this.set("currentOi", Value.fromBigInt(value));
  }

  get currentDebt(): BigInt {
    let value = this.get("currentDebt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentDebt(value: BigInt) {
    this.set("currentDebt", Value.fromBigInt(value));
  }

  get isLong(): boolean {
    let value = this.get("isLong");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isLong(value: boolean) {
    this.set("isLong", Value.fromBoolean(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get feeAmount(): BigInt {
    let value = this.get("feeAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set feeAmount(value: BigInt) {
    this.set("feeAmount", Value.fromBigInt(value));
  }

  get collateral(): BigInt {
    let value = this.get("collateral");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set collateral(value: BigInt) {
    this.set("collateral", Value.fromBigInt(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transaction(): Bytes {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }
}

export class Unwind extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Unwind entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Unwind must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Unwind", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Unwind | null {
    return changetype<Unwind | null>(
      store.get_in_block("Unwind", id.toHexString()),
    );
  }

  static load(id: Bytes): Unwind | null {
    return changetype<Unwind | null>(store.get("Unwind", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get position(): Bytes {
    let value = this.get("position");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set position(value: Bytes) {
    this.set("position", Value.fromBytes(value));
  }

  get unwindNumber(): BigInt {
    let value = this.get("unwindNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set unwindNumber(value: BigInt) {
    this.set("unwindNumber", Value.fromBigInt(value));
  }

  get currentOi(): BigInt {
    let value = this.get("currentOi");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentOi(value: BigInt) {
    this.set("currentOi", Value.fromBigInt(value));
  }

  get currentDebt(): BigInt {
    let value = this.get("currentDebt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentDebt(value: BigInt) {
    this.set("currentDebt", Value.fromBigInt(value));
  }

  get isLong(): boolean {
    let value = this.get("isLong");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isLong(value: boolean) {
    this.set("isLong", Value.fromBoolean(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get fraction(): BigInt {
    let value = this.get("fraction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set fraction(value: BigInt) {
    this.set("fraction", Value.fromBigInt(value));
  }

  get fractionOfPosition(): BigInt {
    let value = this.get("fractionOfPosition");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set fractionOfPosition(value: BigInt) {
    this.set("fractionOfPosition", Value.fromBigInt(value));
  }

  get transferAmount(): BigInt {
    let value = this.get("transferAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set transferAmount(value: BigInt) {
    this.set("transferAmount", Value.fromBigInt(value));
  }

  get pnl(): BigInt {
    let value = this.get("pnl");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set pnl(value: BigInt) {
    this.set("pnl", Value.fromBigInt(value));
  }

  get feeAmount(): BigInt {
    let value = this.get("feeAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set feeAmount(value: BigInt) {
    this.set("feeAmount", Value.fromBigInt(value));
  }

  get fundingPayment(): BigInt {
    let value = this.get("fundingPayment");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set fundingPayment(value: BigInt) {
    this.set("fundingPayment", Value.fromBigInt(value));
  }

  get size(): BigInt {
    let value = this.get("size");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set size(value: BigInt) {
    this.set("size", Value.fromBigInt(value));
  }

  get volume(): BigInt {
    let value = this.get("volume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set volume(value: BigInt) {
    this.set("volume", Value.fromBigInt(value));
  }

  get mint(): BigInt {
    let value = this.get("mint");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set mint(value: BigInt) {
    this.set("mint", Value.fromBigInt(value));
  }

  get collateral(): BigInt {
    let value = this.get("collateral");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set collateral(value: BigInt) {
    this.set("collateral", Value.fromBigInt(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transaction(): Bytes {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }
}

export class Liquidate extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Liquidate entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Liquidate must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Liquidate", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Liquidate | null {
    return changetype<Liquidate | null>(
      store.get_in_block("Liquidate", id.toHexString()),
    );
  }

  static load(id: Bytes): Liquidate | null {
    return changetype<Liquidate | null>(
      store.get("Liquidate", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get position(): Bytes {
    let value = this.get("position");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set position(value: Bytes) {
    this.set("position", Value.fromBytes(value));
  }

  get fractionOfPosition(): BigInt {
    let value = this.get("fractionOfPosition");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set fractionOfPosition(value: BigInt) {
    this.set("fractionOfPosition", Value.fromBigInt(value));
  }

  get fundingPayment(): BigInt {
    let value = this.get("fundingPayment");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set fundingPayment(value: BigInt) {
    this.set("fundingPayment", Value.fromBigInt(value));
  }

  get size(): BigInt {
    let value = this.get("size");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set size(value: BigInt) {
    this.set("size", Value.fromBigInt(value));
  }

  get currentOi(): BigInt {
    let value = this.get("currentOi");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentOi(value: BigInt) {
    this.set("currentOi", Value.fromBigInt(value));
  }

  get currentDebt(): BigInt {
    let value = this.get("currentDebt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentDebt(value: BigInt) {
    this.set("currentDebt", Value.fromBigInt(value));
  }

  get isLong(): boolean {
    let value = this.get("isLong");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isLong(value: boolean) {
    this.set("isLong", Value.fromBoolean(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get mint(): BigInt {
    let value = this.get("mint");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set mint(value: BigInt) {
    this.set("mint", Value.fromBigInt(value));
  }

  get collateral(): BigInt {
    let value = this.get("collateral");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set collateral(value: BigInt) {
    this.set("collateral", Value.fromBigInt(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transaction(): Bytes {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }

  get volume(): BigInt {
    let value = this.get("volume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set volume(value: BigInt) {
    this.set("volume", Value.fromBigInt(value));
  }

  get liquidationFee(): BigInt {
    let value = this.get("liquidationFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set liquidationFee(value: BigInt) {
    this.set("liquidationFee", Value.fromBigInt(value));
  }

  get marginToBurn(): BigInt {
    let value = this.get("marginToBurn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set marginToBurn(value: BigInt) {
    this.set("marginToBurn", Value.fromBigInt(value));
  }

  get transferFeeAmount(): BigInt {
    let value = this.get("transferFeeAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set transferFeeAmount(value: BigInt) {
    this.set("transferFeeAmount", Value.fromBigInt(value));
  }
}

export class Account extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Account must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Account", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Account | null {
    return changetype<Account | null>(
      store.get_in_block("Account", id.toHexString()),
    );
  }

  static load(id: Bytes): Account | null {
    return changetype<Account | null>(store.get("Account", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get realizedPnl(): BigInt {
    let value = this.get("realizedPnl");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set realizedPnl(value: BigInt) {
    this.set("realizedPnl", Value.fromBigInt(value));
  }

  get numberOfUnwinds(): BigInt {
    let value = this.get("numberOfUnwinds");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set numberOfUnwinds(value: BigInt) {
    this.set("numberOfUnwinds", Value.fromBigInt(value));
  }

  get numberOfLiquidatedPositions(): BigInt {
    let value = this.get("numberOfLiquidatedPositions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set numberOfLiquidatedPositions(value: BigInt) {
    this.set("numberOfLiquidatedPositions", Value.fromBigInt(value));
  }

  get numberOfOpenPositions(): BigInt {
    let value = this.get("numberOfOpenPositions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set numberOfOpenPositions(value: BigInt) {
    this.set("numberOfOpenPositions", Value.fromBigInt(value));
  }

  get planckCatBalance(): BigInt {
    let value = this.get("planckCatBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set planckCatBalance(value: BigInt) {
    this.set("planckCatBalance", Value.fromBigInt(value));
  }

  get ovlVolumeTraded(): BigInt {
    let value = this.get("ovlVolumeTraded");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set ovlVolumeTraded(value: BigInt) {
    this.set("ovlVolumeTraded", Value.fromBigInt(value));
  }

  get positions(): PositionLoader {
    return new PositionLoader(
      "Account",
      this.get("id")!.toBytes().toHexString(),
      "positions",
    );
  }

  get builds(): BuildLoader {
    return new BuildLoader(
      "Account",
      this.get("id")!.toBytes().toHexString(),
      "builds",
    );
  }

  get unwinds(): UnwindLoader {
    return new UnwindLoader(
      "Account",
      this.get("id")!.toBytes().toHexString(),
      "unwinds",
    );
  }

  get liquidates(): LiquidateLoader {
    return new LiquidateLoader(
      "Account",
      this.get("id")!.toBytes().toHexString(),
      "liquidates",
    );
  }

  get stakingPositions(): StakingPositionLoader {
    return new StakingPositionLoader(
      "Account",
      this.get("id")!.toBytes().toHexString(),
      "stakingPositions",
    );
  }

  get referralPositions(): ReferralPositionLoader {
    return new ReferralPositionLoader(
      "Account",
      this.get("id")!.toBytes().toHexString(),
      "referralPositions",
    );
  }

  get tradingMiningEpochVolumes(): TradingMiningEpochVolumeLoader {
    return new TradingMiningEpochVolumeLoader(
      "Account",
      this.get("id")!.toBytes().toHexString(),
      "tradingMiningEpochVolumes",
    );
  }

  get tokens(): TokenPositionLoader {
    return new TokenPositionLoader(
      "Account",
      this.get("id")!.toBytes().toHexString(),
      "tokens",
    );
  }

  get nfts(): ERC721NFTLoader {
    return new ERC721NFTLoader(
      "Account",
      this.get("id")!.toBytes().toHexString(),
      "nfts",
    );
  }
}

export class TokenTransfer extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenTransfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TokenTransfer must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TokenTransfer", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): TokenTransfer | null {
    return changetype<TokenTransfer | null>(
      store.get_in_block("TokenTransfer", id.toHexString()),
    );
  }

  static load(id: Bytes): TokenTransfer | null {
    return changetype<TokenTransfer | null>(
      store.get("TokenTransfer", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get transaction(): Bytes {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }
}

export class TokenPosition extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenPosition entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TokenPosition must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TokenPosition", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): TokenPosition | null {
    return changetype<TokenPosition | null>(
      store.get_in_block("TokenPosition", id.toHexString()),
    );
  }

  static load(id: Bytes): TokenPosition | null {
    return changetype<TokenPosition | null>(
      store.get("TokenPosition", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }
}

export class ERC20Token extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ERC20Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ERC20Token must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ERC20Token", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): ERC20Token | null {
    return changetype<ERC20Token | null>(
      store.get_in_block("ERC20Token", id.toHexString()),
    );
  }

  static load(id: Bytes): ERC20Token | null {
    return changetype<ERC20Token | null>(
      store.get("ERC20Token", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get totalSupplyHourData(): TotalSupplyHourDataLoader {
    return new TotalSupplyHourDataLoader(
      "ERC20Token",
      this.get("id")!.toBytes().toHexString(),
      "totalSupplyHourData",
    );
  }
}

export class RewardsClaimed extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RewardsClaimed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type RewardsClaimed must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("RewardsClaimed", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): RewardsClaimed | null {
    return changetype<RewardsClaimed | null>(
      store.get_in_block("RewardsClaimed", id.toHexString()),
    );
  }

  static load(id: Bytes): RewardsClaimed | null {
    return changetype<RewardsClaimed | null>(
      store.get("RewardsClaimed", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get staker(): Bytes {
    let value = this.get("staker");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set staker(value: Bytes) {
    this.set("staker", Value.fromBytes(value));
  }

  get stakingPosition(): Bytes {
    let value = this.get("stakingPosition");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set stakingPosition(value: Bytes) {
    this.set("stakingPosition", Value.fromBytes(value));
  }

  get rewardAmount(): BigInt {
    let value = this.get("rewardAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set rewardAmount(value: BigInt) {
    this.set("rewardAmount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class TokensStaked extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokensStaked entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TokensStaked must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TokensStaked", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): TokensStaked | null {
    return changetype<TokensStaked | null>(
      store.get_in_block("TokensStaked", id.toHexString()),
    );
  }

  static load(id: Bytes): TokensStaked | null {
    return changetype<TokensStaked | null>(
      store.get("TokensStaked", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get staker(): Bytes {
    let value = this.get("staker");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set staker(value: Bytes) {
    this.set("staker", Value.fromBytes(value));
  }

  get stakingPosition(): Bytes {
    let value = this.get("stakingPosition");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set stakingPosition(value: Bytes) {
    this.set("stakingPosition", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class TokensWithdrawn extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokensWithdrawn entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TokensWithdrawn must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TokensWithdrawn", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): TokensWithdrawn | null {
    return changetype<TokensWithdrawn | null>(
      store.get_in_block("TokensWithdrawn", id.toHexString()),
    );
  }

  static load(id: Bytes): TokensWithdrawn | null {
    return changetype<TokensWithdrawn | null>(
      store.get("TokensWithdrawn", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get staker(): Bytes {
    let value = this.get("staker");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set staker(value: Bytes) {
    this.set("staker", Value.fromBytes(value));
  }

  get stakingPosition(): Bytes {
    let value = this.get("stakingPosition");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set stakingPosition(value: Bytes) {
    this.set("stakingPosition", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class StakingPosition extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StakingPosition entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type StakingPosition must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("StakingPosition", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): StakingPosition | null {
    return changetype<StakingPosition | null>(
      store.get_in_block("StakingPosition", id.toHexString()),
    );
  }

  static load(id: Bytes): StakingPosition | null {
    return changetype<StakingPosition | null>(
      store.get("StakingPosition", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get pool(): Bytes {
    let value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set pool(value: Bytes) {
    this.set("pool", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get stakedBalance(): BigInt {
    let value = this.get("stakedBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set stakedBalance(value: BigInt) {
    this.set("stakedBalance", Value.fromBigInt(value));
  }

  get totalRewardsClaimed(): BigInt {
    let value = this.get("totalRewardsClaimed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalRewardsClaimed(value: BigInt) {
    this.set("totalRewardsClaimed", Value.fromBigInt(value));
  }

  get tokensStaked(): TokensStakedLoader {
    return new TokensStakedLoader(
      "StakingPosition",
      this.get("id")!.toBytes().toHexString(),
      "tokensStaked",
    );
  }

  get tokensWithdrawn(): TokensWithdrawnLoader {
    return new TokensWithdrawnLoader(
      "StakingPosition",
      this.get("id")!.toBytes().toHexString(),
      "tokensWithdrawn",
    );
  }

  get rewardsClaimed(): RewardsClaimedLoader {
    return new RewardsClaimedLoader(
      "StakingPosition",
      this.get("id")!.toBytes().toHexString(),
      "rewardsClaimed",
    );
  }
}

export class Staking extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Staking entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Staking must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Staking", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Staking | null {
    return changetype<Staking | null>(
      store.get_in_block("Staking", id.toHexString()),
    );
  }

  static load(id: Bytes): Staking | null {
    return changetype<Staking | null>(store.get("Staking", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get rewardToken(): Bytes {
    let value = this.get("rewardToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set rewardToken(value: Bytes) {
    this.set("rewardToken", Value.fromBytes(value));
  }

  get stakingToken(): Bytes {
    let value = this.get("stakingToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set stakingToken(value: Bytes) {
    this.set("stakingToken", Value.fromBytes(value));
  }

  get timeUnit(): BigInt {
    let value = this.get("timeUnit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timeUnit(value: BigInt) {
    this.set("timeUnit", Value.fromBigInt(value));
  }

  get rewardsBalance(): BigInt {
    let value = this.get("rewardsBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set rewardsBalance(value: BigInt) {
    this.set("rewardsBalance", Value.fromBigInt(value));
  }

  get stakedBalance(): BigInt {
    let value = this.get("stakedBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set stakedBalance(value: BigInt) {
    this.set("stakedBalance", Value.fromBigInt(value));
  }

  get totalRewardsClaimed(): BigInt {
    let value = this.get("totalRewardsClaimed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalRewardsClaimed(value: BigInt) {
    this.set("totalRewardsClaimed", Value.fromBigInt(value));
  }

  get totalStaked(): BigInt {
    let value = this.get("totalStaked");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalStaked(value: BigInt) {
    this.set("totalStaked", Value.fromBigInt(value));
  }

  get rewardRatioNumerator(): BigInt {
    let value = this.get("rewardRatioNumerator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set rewardRatioNumerator(value: BigInt) {
    this.set("rewardRatioNumerator", Value.fromBigInt(value));
  }

  get rewardRatioDenominator(): BigInt {
    let value = this.get("rewardRatioDenominator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set rewardRatioDenominator(value: BigInt) {
    this.set("rewardRatioDenominator", Value.fromBigInt(value));
  }

  get stakingPositions(): StakingPositionLoader {
    return new StakingPositionLoader(
      "Staking",
      this.get("id")!.toBytes().toHexString(),
      "stakingPositions",
    );
  }
}

export class ERC721Transfer extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ERC721Transfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ERC721Transfer must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ERC721Transfer", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): ERC721Transfer | null {
    return changetype<ERC721Transfer | null>(
      store.get_in_block("ERC721Transfer", id.toHexString()),
    );
  }

  static load(id: Bytes): ERC721Transfer | null {
    return changetype<ERC721Transfer | null>(
      store.get("ERC721Transfer", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get nft(): Bytes {
    let value = this.get("nft");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set nft(value: Bytes) {
    this.set("nft", Value.fromBytes(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get transaction(): Bytes {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }
}

export class ERC721NFT extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ERC721NFT entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ERC721NFT must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ERC721NFT", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): ERC721NFT | null {
    return changetype<ERC721NFT | null>(
      store.get_in_block("ERC721NFT", id.toHexString()),
    );
  }

  static load(id: Bytes): ERC721NFT | null {
    return changetype<ERC721NFT | null>(
      store.get("ERC721NFT", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get contract(): Bytes {
    let value = this.get("contract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set contract(value: Bytes) {
    this.set("contract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get tokenUri(): string {
    let value = this.get("tokenUri");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tokenUri(value: string) {
    this.set("tokenUri", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }
}

export class ERC721Token extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ERC721Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ERC721Token must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ERC721Token", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): ERC721Token | null {
    return changetype<ERC721Token | null>(
      store.get_in_block("ERC721Token", id.toHexString()),
    );
  }

  static load(id: Bytes): ERC721Token | null {
    return changetype<ERC721Token | null>(
      store.get("ERC721Token", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }
}

export class ReferralProgram extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ReferralProgram entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ReferralProgram must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ReferralProgram", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): ReferralProgram | null {
    return changetype<ReferralProgram | null>(
      store.get_in_block("ReferralProgram", id.toHexString()),
    );
  }

  static load(id: Bytes): ReferralProgram | null {
    return changetype<ReferralProgram | null>(
      store.get("ReferralProgram", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get rewardToken(): Bytes {
    let value = this.get("rewardToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set rewardToken(value: Bytes) {
    this.set("rewardToken", Value.fromBytes(value));
  }

  get affiliateComission(): Array<BigInt> {
    let value = this.get("affiliateComission");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set affiliateComission(value: Array<BigInt>) {
    this.set("affiliateComission", Value.fromBigIntArray(value));
  }

  get traderDiscount(): Array<BigInt> {
    let value = this.get("traderDiscount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set traderDiscount(value: Array<BigInt>) {
    this.set("traderDiscount", Value.fromBigIntArray(value));
  }

  get createdAtTimestamp(): BigInt {
    let value = this.get("createdAtTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAtTimestamp(value: BigInt) {
    this.set("createdAtTimestamp", Value.fromBigInt(value));
  }

  get createdAtBlockNumber(): BigInt {
    let value = this.get("createdAtBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAtBlockNumber(value: BigInt) {
    this.set("createdAtBlockNumber", Value.fromBigInt(value));
  }

  get latestUpdateTransaction(): Bytes {
    let value = this.get("latestUpdateTransaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set latestUpdateTransaction(value: Bytes) {
    this.set("latestUpdateTransaction", Value.fromBytes(value));
  }

  get totalRewards(): BigInt {
    let value = this.get("totalRewards");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalRewards(value: BigInt) {
    this.set("totalRewards", Value.fromBigInt(value));
  }

  get totalAirdropped(): BigInt {
    let value = this.get("totalAirdropped");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalAirdropped(value: BigInt) {
    this.set("totalAirdropped", Value.fromBigInt(value));
  }

  get referralPositions(): ReferralPositionLoader {
    return new ReferralPositionLoader(
      "ReferralProgram",
      this.get("id")!.toBytes().toHexString(),
      "referralPositions",
    );
  }
}

export class ReferralPosition extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ReferralPosition entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ReferralPosition must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ReferralPosition", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): ReferralPosition | null {
    return changetype<ReferralPosition | null>(
      store.get_in_block("ReferralPosition", id.toHexString()),
    );
  }

  static load(id: Bytes): ReferralPosition | null {
    return changetype<ReferralPosition | null>(
      store.get("ReferralPosition", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get referralProgram(): Bytes {
    let value = this.get("referralProgram");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set referralProgram(value: Bytes) {
    this.set("referralProgram", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get tier(): i32 {
    let value = this.get("tier");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set tier(value: i32) {
    this.set("tier", Value.fromI32(value));
  }

  get affiliatedTo(): Bytes | null {
    let value = this.get("affiliatedTo");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set affiliatedTo(value: Bytes | null) {
    if (!value) {
      this.unset("affiliatedTo");
    } else {
      this.set("affiliatedTo", Value.fromBytes(<Bytes>value));
    }
  }

  get totalAffiliateComission(): BigInt {
    let value = this.get("totalAffiliateComission");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalAffiliateComission(value: BigInt) {
    this.set("totalAffiliateComission", Value.fromBigInt(value));
  }

  get totalTraderDiscount(): BigInt {
    let value = this.get("totalTraderDiscount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTraderDiscount(value: BigInt) {
    this.set("totalTraderDiscount", Value.fromBigInt(value));
  }

  get totalAirdroppedAmount(): BigInt {
    let value = this.get("totalAirdroppedAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalAirdroppedAmount(value: BigInt) {
    this.set("totalAirdroppedAmount", Value.fromBigInt(value));
  }

  get totalRewardsPending(): BigInt {
    let value = this.get("totalRewardsPending");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalRewardsPending(value: BigInt) {
    this.set("totalRewardsPending", Value.fromBigInt(value));
  }

  get accountsReferred(): i32 {
    let value = this.get("accountsReferred");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set accountsReferred(value: i32) {
    this.set("accountsReferred", Value.fromI32(value));
  }
}

export class TradingMining extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TradingMining entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TradingMining must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TradingMining", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): TradingMining | null {
    return changetype<TradingMining | null>(
      store.get_in_block("TradingMining", id.toHexString()),
    );
  }

  static load(id: Bytes): TradingMining | null {
    return changetype<TradingMining | null>(
      store.get("TradingMining", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get totalRewards(): BigInt {
    let value = this.get("totalRewards");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalRewards(value: BigInt) {
    this.set("totalRewards", Value.fromBigInt(value));
  }

  get rewardToken1(): Bytes {
    let value = this.get("rewardToken1");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set rewardToken1(value: Bytes) {
    this.set("rewardToken1", Value.fromBytes(value));
  }

  get rewardToken2(): Bytes {
    let value = this.get("rewardToken2");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set rewardToken2(value: Bytes) {
    this.set("rewardToken2", Value.fromBytes(value));
  }

  get token1Percentage(): i32 {
    let value = this.get("token1Percentage");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set token1Percentage(value: i32) {
    this.set("token1Percentage", Value.fromI32(value));
  }

  get startTime(): BigInt {
    let value = this.get("startTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set startTime(value: BigInt) {
    this.set("startTime", Value.fromBigInt(value));
  }

  get epochDuration(): BigInt {
    let value = this.get("epochDuration");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set epochDuration(value: BigInt) {
    this.set("epochDuration", Value.fromBigInt(value));
  }

  get pcdHolderBonusPercentage(): i32 {
    let value = this.get("pcdHolderBonusPercentage");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set pcdHolderBonusPercentage(value: i32) {
    this.set("pcdHolderBonusPercentage", Value.fromI32(value));
  }

  get maxRewardPerEpochPerAddress(): BigInt {
    let value = this.get("maxRewardPerEpochPerAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set maxRewardPerEpochPerAddress(value: BigInt) {
    this.set("maxRewardPerEpochPerAddress", Value.fromBigInt(value));
  }
}

export class TradingMiningEpoch extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TradingMiningEpoch entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TradingMiningEpoch must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TradingMiningEpoch", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): TradingMiningEpoch | null {
    return changetype<TradingMiningEpoch | null>(
      store.get_in_block("TradingMiningEpoch", id.toHexString()),
    );
  }

  static load(id: Bytes): TradingMiningEpoch | null {
    return changetype<TradingMiningEpoch | null>(
      store.get("TradingMiningEpoch", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get epoch(): BigInt {
    let value = this.get("epoch");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set epoch(value: BigInt) {
    this.set("epoch", Value.fromBigInt(value));
  }

  get totalVolume(): BigInt {
    let value = this.get("totalVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalVolume(value: BigInt) {
    this.set("totalVolume", Value.fromBigInt(value));
  }

  get totalRewards(): BigInt {
    let value = this.get("totalRewards");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalRewards(value: BigInt) {
    this.set("totalRewards", Value.fromBigInt(value));
  }

  get token1Percentage(): i32 {
    let value = this.get("token1Percentage");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set token1Percentage(value: i32) {
    this.set("token1Percentage", Value.fromI32(value));
  }
}

export class TradingMiningEpochVolume extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save TradingMiningEpochVolume entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TradingMiningEpochVolume must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TradingMiningEpochVolume", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): TradingMiningEpochVolume | null {
    return changetype<TradingMiningEpochVolume | null>(
      store.get_in_block("TradingMiningEpochVolume", id.toHexString()),
    );
  }

  static load(id: Bytes): TradingMiningEpochVolume | null {
    return changetype<TradingMiningEpochVolume | null>(
      store.get("TradingMiningEpochVolume", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get epoch(): BigInt {
    let value = this.get("epoch");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set epoch(value: BigInt) {
    this.set("epoch", Value.fromBigInt(value));
  }

  get volume(): BigInt {
    let value = this.get("volume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set volume(value: BigInt) {
    this.set("volume", Value.fromBigInt(value));
  }

  get trader(): Bytes {
    let value = this.get("trader");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set trader(value: Bytes) {
    this.set("trader", Value.fromBytes(value));
  }
}

export class TotalSupplyHourData extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TotalSupplyHourData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TotalSupplyHourData must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TotalSupplyHourData", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): TotalSupplyHourData | null {
    return changetype<TotalSupplyHourData | null>(
      store.get_in_block("TotalSupplyHourData", id.toHexString()),
    );
  }

  static load(id: Bytes): TotalSupplyHourData | null {
    return changetype<TotalSupplyHourData | null>(
      store.get("TotalSupplyHourData", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get periodStartUnix(): i32 {
    let value = this.get("periodStartUnix");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set periodStartUnix(value: i32) {
    this.set("periodStartUnix", Value.fromI32(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get minted(): BigInt {
    let value = this.get("minted");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set minted(value: BigInt) {
    this.set("minted", Value.fromBigInt(value));
  }

  get burnt(): BigInt {
    let value = this.get("burnt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set burnt(value: BigInt) {
    this.set("burnt", Value.fromBigInt(value));
  }

  get open(): BigInt {
    let value = this.get("open");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set open(value: BigInt) {
    this.set("open", Value.fromBigInt(value));
  }

  get high(): BigInt {
    let value = this.get("high");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set high(value: BigInt) {
    this.set("high", Value.fromBigInt(value));
  }

  get low(): BigInt {
    let value = this.get("low");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set low(value: BigInt) {
    this.set("low", Value.fromBigInt(value));
  }

  get close(): BigInt {
    let value = this.get("close");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set close(value: BigInt) {
    this.set("close", Value.fromBigInt(value));
  }
}

export class MarketHourData extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MarketHourData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type MarketHourData must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("MarketHourData", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): MarketHourData | null {
    return changetype<MarketHourData | null>(
      store.get_in_block("MarketHourData", id.toHexString()),
    );
  }

  static load(id: Bytes): MarketHourData | null {
    return changetype<MarketHourData | null>(
      store.get("MarketHourData", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get periodStartUnix(): i32 {
    let value = this.get("periodStartUnix");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set periodStartUnix(value: i32) {
    this.set("periodStartUnix", Value.fromI32(value));
  }

  get market(): Bytes {
    let value = this.get("market");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set market(value: Bytes) {
    this.set("market", Value.fromBytes(value));
  }

  get minted(): BigInt {
    let value = this.get("minted");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set minted(value: BigInt) {
    this.set("minted", Value.fromBigInt(value));
  }

  get burnt(): BigInt {
    let value = this.get("burnt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set burnt(value: BigInt) {
    this.set("burnt", Value.fromBigInt(value));
  }

  get totalMint(): BigInt {
    let value = this.get("totalMint");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalMint(value: BigInt) {
    this.set("totalMint", Value.fromBigInt(value));
  }

  get accumulatedTotalMint(): BigInt {
    let value = this.get("accumulatedTotalMint");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set accumulatedTotalMint(value: BigInt) {
    this.set("accumulatedTotalMint", Value.fromBigInt(value));
  }

  get volume(): BigInt {
    let value = this.get("volume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set volume(value: BigInt) {
    this.set("volume", Value.fromBigInt(value));
  }

  get oiLong(): BigInt {
    let value = this.get("oiLong");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set oiLong(value: BigInt) {
    this.set("oiLong", Value.fromBigInt(value));
  }

  get oiShort(): BigInt {
    let value = this.get("oiShort");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set oiShort(value: BigInt) {
    this.set("oiShort", Value.fromBigInt(value));
  }

  get fundingRate(): BigInt {
    let value = this.get("fundingRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set fundingRate(value: BigInt) {
    this.set("fundingRate", Value.fromBigInt(value));
  }
}

export class MarketLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Market[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Market[]>(value);
  }
}

export class MarketHourDataLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): MarketHourData[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<MarketHourData[]>(value);
  }
}

export class PositionLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Position[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Position[]>(value);
  }
}

export class MarketStateLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): MarketState[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<MarketState[]>(value);
  }
}

export class BuildLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Build[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Build[]>(value);
  }
}

export class LiquidateLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Liquidate[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Liquidate[]>(value);
  }
}

export class UnwindLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Unwind[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Unwind[]>(value);
  }
}

export class TokenTransferLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): TokenTransfer[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<TokenTransfer[]>(value);
  }
}

export class StakingPositionLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): StakingPosition[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<StakingPosition[]>(value);
  }
}

export class ReferralPositionLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): ReferralPosition[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<ReferralPosition[]>(value);
  }
}

export class TradingMiningEpochVolumeLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): TradingMiningEpochVolume[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<TradingMiningEpochVolume[]>(value);
  }
}

export class TokenPositionLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): TokenPosition[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<TokenPosition[]>(value);
  }
}

export class ERC721NFTLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): ERC721NFT[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<ERC721NFT[]>(value);
  }
}

export class TotalSupplyHourDataLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): TotalSupplyHourData[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<TotalSupplyHourData[]>(value);
  }
}

export class TokensStakedLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): TokensStaked[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<TokensStaked[]>(value);
  }
}

export class TokensWithdrawnLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): TokensWithdrawn[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<TokensWithdrawn[]>(value);
  }
}

export class RewardsClaimedLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): RewardsClaimed[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<RewardsClaimed[]>(value);
  }
}
