// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Factory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("marketCount", Value.fromBigInt(BigInt.zero()));
    this.set("txCount", Value.fromBigInt(BigInt.zero()));
    this.set("totalVolumeOVL", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalFeesOVL", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalValueLockedOVL", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("feeRecipient", Value.fromString(""));
    this.set("owner", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Factory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Factory entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Factory", id.toString(), this);
    }
  }

  static load(id: string): Factory | null {
    return changetype<Factory | null>(store.get("Factory", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get marketCount(): BigInt {
    let value = this.get("marketCount");
    return value!.toBigInt();
  }

  set marketCount(value: BigInt) {
    this.set("marketCount", Value.fromBigInt(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value!.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get totalVolumeOVL(): BigDecimal {
    let value = this.get("totalVolumeOVL");
    return value!.toBigDecimal();
  }

  set totalVolumeOVL(value: BigDecimal) {
    this.set("totalVolumeOVL", Value.fromBigDecimal(value));
  }

  get totalFeesOVL(): BigDecimal {
    let value = this.get("totalFeesOVL");
    return value!.toBigDecimal();
  }

  set totalFeesOVL(value: BigDecimal) {
    this.set("totalFeesOVL", Value.fromBigDecimal(value));
  }

  get totalValueLockedOVL(): BigDecimal {
    let value = this.get("totalValueLockedOVL");
    return value!.toBigDecimal();
  }

  set totalValueLockedOVL(value: BigDecimal) {
    this.set("totalValueLockedOVL", Value.fromBigDecimal(value));
  }

  get feeRecipient(): string {
    let value = this.get("feeRecipient");
    return value!.toString();
  }

  set feeRecipient(value: string) {
    this.set("feeRecipient", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }
}

export class Market extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("baseTokenSymbol", Value.fromString(""));
    this.set("quoteTokenSymbol", Value.fromString(""));
    this.set("feedAddress", Value.fromString(""));
    this.set("factoryAddress", Value.fromString(""));
    this.set("createdAtTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("createdAtBlockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("k", Value.fromBigInt(BigInt.zero()));
    this.set("lmbda", Value.fromBigInt(BigInt.zero()));
    this.set("delta", Value.fromBigInt(BigInt.zero()));
    this.set("capPayoff", Value.fromBigInt(BigInt.zero()));
    this.set("capNotional", Value.fromBigInt(BigInt.zero()));
    this.set("capLeverage", Value.fromBigInt(BigInt.zero()));
    this.set("circuitBreakingWindow", Value.fromBigInt(BigInt.zero()));
    this.set("maintenanceMarginFraction", Value.fromBigInt(BigInt.zero()));
    this.set("maintenanceMarginBurnRate", Value.fromBigInt(BigInt.zero()));
    this.set("liquidationFeeRate", Value.fromBigInt(BigInt.zero()));
    this.set("tradingFeeRate", Value.fromBigInt(BigInt.zero()));
    this.set("minCollateral", Value.fromBigInt(BigInt.zero()));
    this.set("priceDriftUpperLimit", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Market entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Market entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Market", id.toString(), this);
    }
  }

  static load(id: string): Market | null {
    return changetype<Market | null>(store.get("Market", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get baseTokenSymbol(): string {
    let value = this.get("baseTokenSymbol");
    return value!.toString();
  }

  set baseTokenSymbol(value: string) {
    this.set("baseTokenSymbol", Value.fromString(value));
  }

  get quoteTokenSymbol(): string {
    let value = this.get("quoteTokenSymbol");
    return value!.toString();
  }

  set quoteTokenSymbol(value: string) {
    this.set("quoteTokenSymbol", Value.fromString(value));
  }

  get feedAddress(): string {
    let value = this.get("feedAddress");
    return value!.toString();
  }

  set feedAddress(value: string) {
    this.set("feedAddress", Value.fromString(value));
  }

  get factoryAddress(): string {
    let value = this.get("factoryAddress");
    return value!.toString();
  }

  set factoryAddress(value: string) {
    this.set("factoryAddress", Value.fromString(value));
  }

  get createdAtTimestamp(): BigInt {
    let value = this.get("createdAtTimestamp");
    return value!.toBigInt();
  }

  set createdAtTimestamp(value: BigInt) {
    this.set("createdAtTimestamp", Value.fromBigInt(value));
  }

  get createdAtBlockNumber(): BigInt {
    let value = this.get("createdAtBlockNumber");
    return value!.toBigInt();
  }

  set createdAtBlockNumber(value: BigInt) {
    this.set("createdAtBlockNumber", Value.fromBigInt(value));
  }

  get k(): BigInt {
    let value = this.get("k");
    return value!.toBigInt();
  }

  set k(value: BigInt) {
    this.set("k", Value.fromBigInt(value));
  }

  get lmbda(): BigInt {
    let value = this.get("lmbda");
    return value!.toBigInt();
  }

  set lmbda(value: BigInt) {
    this.set("lmbda", Value.fromBigInt(value));
  }

  get delta(): BigInt {
    let value = this.get("delta");
    return value!.toBigInt();
  }

  set delta(value: BigInt) {
    this.set("delta", Value.fromBigInt(value));
  }

  get capPayoff(): BigInt {
    let value = this.get("capPayoff");
    return value!.toBigInt();
  }

  set capPayoff(value: BigInt) {
    this.set("capPayoff", Value.fromBigInt(value));
  }

  get capNotional(): BigInt {
    let value = this.get("capNotional");
    return value!.toBigInt();
  }

  set capNotional(value: BigInt) {
    this.set("capNotional", Value.fromBigInt(value));
  }

  get capLeverage(): BigInt {
    let value = this.get("capLeverage");
    return value!.toBigInt();
  }

  set capLeverage(value: BigInt) {
    this.set("capLeverage", Value.fromBigInt(value));
  }

  get circuitBreakingWindow(): BigInt {
    let value = this.get("circuitBreakingWindow");
    return value!.toBigInt();
  }

  set circuitBreakingWindow(value: BigInt) {
    this.set("circuitBreakingWindow", Value.fromBigInt(value));
  }

  get maintenanceMarginFraction(): BigInt {
    let value = this.get("maintenanceMarginFraction");
    return value!.toBigInt();
  }

  set maintenanceMarginFraction(value: BigInt) {
    this.set("maintenanceMarginFraction", Value.fromBigInt(value));
  }

  get maintenanceMarginBurnRate(): BigInt {
    let value = this.get("maintenanceMarginBurnRate");
    return value!.toBigInt();
  }

  set maintenanceMarginBurnRate(value: BigInt) {
    this.set("maintenanceMarginBurnRate", Value.fromBigInt(value));
  }

  get liquidationFeeRate(): BigInt {
    let value = this.get("liquidationFeeRate");
    return value!.toBigInt();
  }

  set liquidationFeeRate(value: BigInt) {
    this.set("liquidationFeeRate", Value.fromBigInt(value));
  }

  get tradingFeeRate(): BigInt {
    let value = this.get("tradingFeeRate");
    return value!.toBigInt();
  }

  set tradingFeeRate(value: BigInt) {
    this.set("tradingFeeRate", Value.fromBigInt(value));
  }

  get minCollateral(): BigInt {
    let value = this.get("minCollateral");
    return value!.toBigInt();
  }

  set minCollateral(value: BigInt) {
    this.set("minCollateral", Value.fromBigInt(value));
  }

  get priceDriftUpperLimit(): BigInt {
    let value = this.get("priceDriftUpperLimit");
    return value!.toBigInt();
  }

  set priceDriftUpperLimit(value: BigInt) {
    this.set("priceDriftUpperLimit", Value.fromBigInt(value));
  }
}
